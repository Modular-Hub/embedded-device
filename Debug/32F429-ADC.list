
32F429-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c8  080047c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d0  080047d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047d4  080047d4  000147d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001a0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013452  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dd9  00000000  00000000  000334f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  000362d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed8  00000000  00000000  00037300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026fce  00000000  00000000  000381d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014782  00000000  00000000  0005f1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec20a  00000000  00000000  00073928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015fb32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000461c  00000000  00000000  0015fb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004758 	.word	0x08004758

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004758 	.word	0x08004758

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0x98>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x98>)
 8000606:	f000 fedd 	bl	80013c4 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000610:	f000 fc3c 	bl	8000e8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000614:	2305      	movs	r3, #5
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x98>)
 8000626:	f001 f87b 	bl	8001720 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000630:	f000 fc2c 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000008c 	.word	0x2000008c
 8000640:	40012000 	.word	0x40012000
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006a2:	2320      	movs	r3, #32
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f001 fb5f 	bl	8001d78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_CRC_Init+0x20>)
 80006d6:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <MX_CRC_Init+0x24>)
 80006d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_CRC_Init+0x20>)
 80006dc:	f001 fb30 	bl	8001d40 <HAL_CRC_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006e6:	f000 fbd1 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000d4 	.word	0x200000d4
 80006f4:	40023000 	.word	0x40023000

080006f8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <HAL_CRC_MspInit+0x3c>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d10d      	bne.n	8000726 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <HAL_CRC_MspInit+0x40>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a09      	ldr	r2, [pc, #36]	; (8000738 <HAL_CRC_MspInit+0x40>)
 8000714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <HAL_CRC_MspInit+0x40>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40023000 	.word	0x40023000
 8000738:	40023800 	.word	0x40023800

0800073c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]
 8000752:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_FMC_Init+0x98>)
 8000756:	4a20      	ldr	r2, [pc, #128]	; (80007d8 <MX_FMC_Init+0x9c>)
 8000758:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_FMC_Init+0x98>)
 800075c:	2201      	movs	r2, #1
 800075e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_FMC_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_FMC_Init+0x98>)
 8000768:	2204      	movs	r2, #4
 800076a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_FMC_Init+0x98>)
 800076e:	2210      	movs	r2, #16
 8000770:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_FMC_Init+0x98>)
 8000774:	2240      	movs	r2, #64	; 0x40
 8000776:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_FMC_Init+0x98>)
 800077a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800077e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_FMC_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_FMC_Init+0x98>)
 8000788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800078c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_FMC_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_FMC_Init+0x98>)
 8000796:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80007a0:	2307      	movs	r3, #7
 80007a2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80007a8:	2307      	movs	r3, #7
 80007aa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80007ac:	2303      	movs	r3, #3
 80007ae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_FMC_Init+0x98>)
 80007be:	f002 f9ed 	bl	8002b9c <HAL_SDRAM_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80007c8:	f000 fb60 	bl	8000e8c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000dc 	.word	0x200000dc
 80007d8:	a0000140 	.word	0xa0000140

080007dc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80007f0:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <HAL_FMC_MspInit+0x104>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d16f      	bne.n	80008d8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80007f8:	4b39      	ldr	r3, [pc, #228]	; (80008e0 <HAL_FMC_MspInit+0x104>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <HAL_FMC_MspInit+0x108>)
 8000804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000806:	4a37      	ldr	r2, [pc, #220]	; (80008e4 <HAL_FMC_MspInit+0x108>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6393      	str	r3, [r2, #56]	; 0x38
 800080e:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <HAL_FMC_MspInit+0x108>)
 8000810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800081a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800081e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800082c:	230c      	movs	r3, #12
 800082e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4619      	mov	r1, r3
 8000834:	482c      	ldr	r0, [pc, #176]	; (80008e8 <HAL_FMC_MspInit+0x10c>)
 8000836:	f001 fa9f 	bl	8001d78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800083a:	2301      	movs	r3, #1
 800083c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800084a:	230c      	movs	r3, #12
 800084c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4826      	ldr	r0, [pc, #152]	; (80008ec <HAL_FMC_MspInit+0x110>)
 8000854:	f001 fa90 	bl	8001d78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000858:	f248 1333 	movw	r3, #33075	; 0x8133
 800085c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800086a:	230c      	movs	r3, #12
 800086c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	481f      	ldr	r0, [pc, #124]	; (80008f0 <HAL_FMC_MspInit+0x114>)
 8000874:	f001 fa80 	bl	8001d78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000878:	f64f 7383 	movw	r3, #65411	; 0xff83
 800087c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800088a:	230c      	movs	r3, #12
 800088c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4818      	ldr	r0, [pc, #96]	; (80008f4 <HAL_FMC_MspInit+0x118>)
 8000894:	f001 fa70 	bl	8001d78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000898:	f24c 7303 	movw	r3, #50947	; 0xc703
 800089c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008aa:	230c      	movs	r3, #12
 80008ac:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4811      	ldr	r0, [pc, #68]	; (80008f8 <HAL_FMC_MspInit+0x11c>)
 80008b4:	f001 fa60 	bl	8001d78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80008b8:	2360      	movs	r3, #96	; 0x60
 80008ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008c8:	230c      	movs	r3, #12
 80008ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	480a      	ldr	r0, [pc, #40]	; (80008fc <HAL_FMC_MspInit+0x120>)
 80008d2:	f001 fa51 	bl	8001d78 <HAL_GPIO_Init>
 80008d6:	e000      	b.n	80008da <HAL_FMC_MspInit+0xfe>
    return;
 80008d8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000110 	.word	0x20000110
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40021400 	.word	0x40021400
 80008ec:	40020800 	.word	0x40020800
 80008f0:	40021800 	.word	0x40021800
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40020c00 	.word	0x40020c00
 80008fc:	40020400 	.word	0x40020400

08000900 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000908:	f7ff ff68 	bl	80007dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <MX_GPIO_Init>:
     PG12   ------> LTDC_B4
     PB8   ------> LTDC_B6
     PB9   ------> LTDC_B7
*/
void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	; 0x38
 8000918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
 800092e:	4bb2      	ldr	r3, [pc, #712]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4ab1      	ldr	r2, [pc, #708]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4baf      	ldr	r3, [pc, #700]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	623b      	str	r3, [r7, #32]
 8000944:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
 800094a:	4bab      	ldr	r3, [pc, #684]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4aaa      	ldr	r2, [pc, #680]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 8000950:	f043 0320 	orr.w	r3, r3, #32
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4ba8      	ldr	r3, [pc, #672]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0320 	and.w	r3, r3, #32
 800095e:	61fb      	str	r3, [r7, #28]
 8000960:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	4ba4      	ldr	r3, [pc, #656]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4aa3      	ldr	r2, [pc, #652]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4ba1      	ldr	r3, [pc, #644]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	4b9d      	ldr	r3, [pc, #628]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a9c      	ldr	r2, [pc, #624]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b9a      	ldr	r3, [pc, #616]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b96      	ldr	r3, [pc, #600]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a95      	ldr	r2, [pc, #596]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b93      	ldr	r3, [pc, #588]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b8f      	ldr	r3, [pc, #572]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a8e      	ldr	r2, [pc, #568]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 80009c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b8c      	ldr	r3, [pc, #560]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b88      	ldr	r3, [pc, #544]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a87      	ldr	r2, [pc, #540]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 80009dc:	f043 0310 	orr.w	r3, r3, #16
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b85      	ldr	r3, [pc, #532]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b81      	ldr	r3, [pc, #516]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a80      	ldr	r2, [pc, #512]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b7e      	ldr	r3, [pc, #504]	; (8000bf8 <MX_GPIO_Init+0x2e4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2116      	movs	r1, #22
 8000a0e:	487b      	ldr	r0, [pc, #492]	; (8000bfc <MX_GPIO_Init+0x2e8>)
 8000a10:	f001 fb76 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	4879      	ldr	r0, [pc, #484]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000a1a:	f001 fb71 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000a24:	4877      	ldr	r0, [pc, #476]	; (8000c04 <MX_GPIO_Init+0x2f0>)
 8000a26:	f001 fb6b 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 8000a30:	4875      	ldr	r0, [pc, #468]	; (8000c08 <MX_GPIO_Init+0x2f4>)
 8000a32:	f001 fb65 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000a36:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000a48:	2305      	movs	r3, #5
 8000a4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	486e      	ldr	r0, [pc, #440]	; (8000c0c <MX_GPIO_Init+0x2f8>)
 8000a54:	f001 f990 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000a58:	2316      	movs	r3, #22
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4863      	ldr	r0, [pc, #396]	; (8000bfc <MX_GPIO_Init+0x2e8>)
 8000a70:	f001 f982 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000a74:	f248 0307 	movw	r3, #32775	; 0x8007
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a7a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	485d      	ldr	r0, [pc, #372]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000a8c:	f001 f974 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4856      	ldr	r0, [pc, #344]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000aa8:	f001 f966 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000aac:	2320      	movs	r3, #32
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	484e      	ldr	r0, [pc, #312]	; (8000bfc <MX_GPIO_Init+0x2e8>)
 8000ac2:	f001 f959 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	484d      	ldr	r0, [pc, #308]	; (8000c10 <MX_GPIO_Init+0x2fc>)
 8000ada:	f001 f94d 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000ade:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000af0:	230e      	movs	r3, #14
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4845      	ldr	r0, [pc, #276]	; (8000c10 <MX_GPIO_Init+0x2fc>)
 8000afc:	f001 f93c 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000b00:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000b12:	230c      	movs	r3, #12
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	483c      	ldr	r0, [pc, #240]	; (8000c10 <MX_GPIO_Init+0x2fc>)
 8000b1e:	f001 f92b 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4836      	ldr	r0, [pc, #216]	; (8000c10 <MX_GPIO_Init+0x2fc>)
 8000b38:	f001 f91e 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	482c      	ldr	r0, [pc, #176]	; (8000c04 <MX_GPIO_Init+0x2f0>)
 8000b52:	f001 f911 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b56:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4825      	ldr	r0, [pc, #148]	; (8000c04 <MX_GPIO_Init+0x2f0>)
 8000b70:	f001 f902 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b74:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b86:	230e      	movs	r3, #14
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	481d      	ldr	r0, [pc, #116]	; (8000c08 <MX_GPIO_Init+0x2f4>)
 8000b92:	f001 f8f1 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b96:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ba8:	230e      	movs	r3, #14
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4812      	ldr	r0, [pc, #72]	; (8000bfc <MX_GPIO_Init+0x2e8>)
 8000bb4:	f001 f8e0 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbe:	2312      	movs	r3, #18
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <MX_GPIO_Init+0x2e8>)
 8000bd6:	f001 f8cf 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be0:	2312      	movs	r3, #18
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bec:	2304      	movs	r3, #4
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	e00d      	b.n	8000c14 <MX_GPIO_Init+0x300>
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020800 	.word	0x40020800
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40020c00 	.word	0x40020c00
 8000c08:	40021800 	.word	0x40021800
 8000c0c:	40021400 	.word	0x40021400
 8000c10:	40020400 	.word	0x40020400
 8000c14:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <MX_GPIO_Init+0x390>)
 8000c16:	f001 f8af 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = R4_Pin|R5_Pin;
 8000c1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c2c:	230e      	movs	r3, #14
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <MX_GPIO_Init+0x390>)
 8000c38:	f001 f89e 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000c3c:	2348      	movs	r3, #72	; 0x48
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c4c:	230e      	movs	r3, #14
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <MX_GPIO_Init+0x394>)
 8000c58:	f001 f88e 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD3_Pin|LD4_Pin;
 8000c5c:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_GPIO_Init+0x398>)
 8000c76:	f001 f87f 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c8c:	2309      	movs	r3, #9
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_GPIO_Init+0x398>)
 8000c98:	f001 f86e 	bl	8001d78 <HAL_GPIO_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	3738      	adds	r7, #56	; 0x38
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	40020c00 	.word	0x40020c00
 8000cac:	40021800 	.word	0x40021800

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f000 fb1f 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f865 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f7ff fe29 	bl	8000914 <MX_GPIO_Init>
  MX_CRC_Init();
 8000cc2:	f7ff fd05 	bl	80006d0 <MX_CRC_Init>
  MX_FMC_Init();
 8000cc6:	f7ff fd39 	bl	800073c <MX_FMC_Init>
  MX_TIM1_Init();
 8000cca:	f000 fa07 	bl	80010dc <MX_TIM1_Init>
  MX_ADC1_Init();
 8000cce:	f7ff fc69 	bl	80005a4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000cd2:	f000 fa75 	bl	80011c0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1){
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4823      	ldr	r0, [pc, #140]	; (8000d68 <main+0xb8>)
 8000cda:	f001 f9f9 	bl	80020d0 <HAL_GPIO_ReadPin>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d1f8      	bne.n	8000cd6 <main+0x26>
      HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce8:	4820      	ldr	r0, [pc, #128]	; (8000d6c <main+0xbc>)
 8000cea:	f001 fa22 	bl	8002132 <HAL_GPIO_TogglePin>

      for(int i=0; i<SECOND * 10; i++){
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	e023      	b.n	8000d3c <main+0x8c>
    	// Get ADC value
        HAL_ADC_Start(&hadc1);
 8000cf4:	481e      	ldr	r0, [pc, #120]	; (8000d70 <main+0xc0>)
 8000cf6:	f000 fba9 	bl	800144c <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000cfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cfe:	481c      	ldr	r0, [pc, #112]	; (8000d70 <main+0xc0>)
 8000d00:	f000 fc76 	bl	80015f0 <HAL_ADC_PollForConversion>
        raw = HAL_ADC_GetValue(&hadc1);
 8000d04:	481a      	ldr	r0, [pc, #104]	; (8000d70 <main+0xc0>)
 8000d06:	f000 fcfe 	bl	8001706 <HAL_ADC_GetValue>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <main+0xc4>)
 8000d10:	801a      	strh	r2, [r3, #0]

        // Convert to string and print
        sprintf(msg, "%hu,", raw);
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <main+0xc4>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	4917      	ldr	r1, [pc, #92]	; (8000d78 <main+0xc8>)
 8000d1a:	4818      	ldr	r0, [pc, #96]	; (8000d7c <main+0xcc>)
 8000d1c:	f003 f8ae 	bl	8003e7c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000d20:	4816      	ldr	r0, [pc, #88]	; (8000d7c <main+0xcc>)
 8000d22:	f7ff fa65 	bl	80001f0 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d2e:	4913      	ldr	r1, [pc, #76]	; (8000d7c <main+0xcc>)
 8000d30:	4813      	ldr	r0, [pc, #76]	; (8000d80 <main+0xd0>)
 8000d32:	f002 fc36 	bl	80035a2 <HAL_UART_Transmit>
      for(int i=0; i<SECOND * 10; i++){
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000d42:	4293      	cmp	r3, r2
 8000d44:	ddd6      	ble.n	8000cf4 <main+0x44>
      }
    // End line and reset pointer
    HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	490d      	ldr	r1, [pc, #52]	; (8000d84 <main+0xd4>)
 8000d4e:	480c      	ldr	r0, [pc, #48]	; (8000d80 <main+0xd0>)
 8000d50:	f002 fc27 	bl	80035a2 <HAL_UART_Transmit>

    // Finish reading
    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000d54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <main+0xbc>)
 8000d5a:	f001 f9ea 	bl	8002132 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d62:	f000 fb0b 	bl	800137c <HAL_Delay>
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1){
 8000d66:	e7b6      	b.n	8000cd6 <main+0x26>
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40021800 	.word	0x40021800
 8000d70:	2000008c 	.word	0x2000008c
 8000d74:	20000114 	.word	0x20000114
 8000d78:	08004770 	.word	0x08004770
 8000d7c:	20000118 	.word	0x20000118
 8000d80:	200001b8 	.word	0x200001b8
 8000d84:	08004778 	.word	0x08004778

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	; 0x50
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	2230      	movs	r2, #48	; 0x30
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 f868 	bl	8003e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <SystemClock_Config+0xd8>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a2a      	ldr	r2, [pc, #168]	; (8000e60 <SystemClock_Config+0xd8>)
 8000db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <SystemClock_Config+0xd8>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <SystemClock_Config+0xdc>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a24      	ldr	r2, [pc, #144]	; (8000e64 <SystemClock_Config+0xdc>)
 8000dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <SystemClock_Config+0xdc>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de4:	2301      	movs	r3, #1
 8000de6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dee:	2302      	movs	r3, #2
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000dfc:	23b4      	movs	r3, #180	; 0xb4
 8000dfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e04:	2303      	movs	r3, #3
 8000e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0320 	add.w	r3, r7, #32
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f9fb 	bl	8002208 <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e18:	f000 f838 	bl	8000e8c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e1c:	f001 f9a4 	bl	8002168 <HAL_PWREx_EnableOverDrive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e26:	f000 f831 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2105      	movs	r1, #5
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 fc55 	bl	80026f8 <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e54:	f000 f81a 	bl	8000e8c <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3750      	adds	r7, #80	; 0x50
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e7a:	f000 fa5f 	bl	800133c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40001000 	.word	0x40001000

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x8>
	...

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	; 0x38
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <HAL_InitTick+0xe4>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	4a32      	ldr	r2, [pc, #200]	; (8000fcc <HAL_InitTick+0xe4>)
 8000f02:	f043 0310 	orr.w	r3, r3, #16
 8000f06:	6413      	str	r3, [r2, #64]	; 0x40
 8000f08:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <HAL_InitTick+0xe4>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f14:	f107 0210 	add.w	r2, r7, #16
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fe0a 	bl	8002b38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d103      	bne.n	8000f36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f2e:	f001 fddb 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8000f32:	6378      	str	r0, [r7, #52]	; 0x34
 8000f34:	e004      	b.n	8000f40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f36:	f001 fdd7 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f42:	4a23      	ldr	r2, [pc, #140]	; (8000fd0 <HAL_InitTick+0xe8>)
 8000f44:	fba2 2303 	umull	r2, r3, r2, r3
 8000f48:	0c9b      	lsrs	r3, r3, #18
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <HAL_InitTick+0xec>)
 8000f50:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <HAL_InitTick+0xf0>)
 8000f52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <HAL_InitTick+0xec>)
 8000f56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f5c:	4a1d      	ldr	r2, [pc, #116]	; (8000fd4 <HAL_InitTick+0xec>)
 8000f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_InitTick+0xec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_InitTick+0xec>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_InitTick+0xec>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f74:	4817      	ldr	r0, [pc, #92]	; (8000fd4 <HAL_InitTick+0xec>)
 8000f76:	f001 fe45 	bl	8002c04 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d11b      	bne.n	8000fc0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f88:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <HAL_InitTick+0xec>)
 8000f8a:	f001 fe8b 	bl	8002ca4 <HAL_TIM_Base_Start_IT>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d111      	bne.n	8000fc0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f9c:	2036      	movs	r0, #54	; 0x36
 8000f9e:	f000 fec1 	bl	8001d24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d808      	bhi.n	8000fba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	2036      	movs	r0, #54	; 0x36
 8000fae:	f000 fe9d 	bl	8001cec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_InitTick+0xf4>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	e002      	b.n	8000fc0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3738      	adds	r7, #56	; 0x38
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	431bde83 	.word	0x431bde83
 8000fd4:	20000124 	.word	0x20000124
 8000fd8:	40001000 	.word	0x40001000
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <TIM6_DAC_IRQHandler+0x10>)
 800103e:	f001 fea1 	bl	8002d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000124 	.word	0x20000124

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f002 fecc 	bl	8003e18 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20030000 	.word	0x20030000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	2000016c 	.word	0x2000016c
 80010b4:	20000210 	.word	0x20000210

080010b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	463b      	mov	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <MX_TIM1_Init+0x98>)
 80010fa:	4a1f      	ldr	r2, [pc, #124]	; (8001178 <MX_TIM1_Init+0x9c>)
 80010fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_TIM1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <MX_TIM1_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_TIM1_Init+0x98>)
 800110c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001110:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_TIM1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_TIM1_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_TIM1_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001124:	4813      	ldr	r0, [pc, #76]	; (8001174 <MX_TIM1_Init+0x98>)
 8001126:	f001 fd6d 	bl	8002c04 <HAL_TIM_Base_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001130:	f7ff feac 	bl	8000e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001138:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <MX_TIM1_Init+0x98>)
 8001142:	f001 ff27 	bl	8002f94 <HAL_TIM_ConfigClockSource>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800114c:	f7ff fe9e 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_TIM1_Init+0x98>)
 800115e:	f002 f943 	bl	80033e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001168:	f7ff fe90 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000170 	.word	0x20000170
 8001178:	40010000 	.word	0x40010000

0800117c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <HAL_TIM_Base_MspInit+0x3c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d10d      	bne.n	80011aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_TIM_Base_MspInit+0x40>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <HAL_TIM_Base_MspInit+0x40>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <HAL_TIM_Base_MspInit+0x40>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40010000 	.word	0x40010000
 80011bc:	40023800 	.word	0x40023800

080011c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_USART1_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_USART1_UART_Init+0x4c>)
 80011f8:	f002 f986 	bl	8003508 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001202:	f7ff fe43 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200001b8 	.word	0x200001b8
 8001210:	40011000 	.word	0x40011000

08001214 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a19      	ldr	r2, [pc, #100]	; (8001298 <HAL_UART_MspInit+0x84>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d12c      	bne.n	8001290 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_UART_MspInit+0x88>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_UART_MspInit+0x88>)
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_UART_MspInit+0x88>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_UART_MspInit+0x88>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <HAL_UART_MspInit+0x88>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_UART_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800126e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001280:	2307      	movs	r3, #7
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_UART_MspInit+0x8c>)
 800128c:	f000 fd74 	bl	8001d78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40011000 	.word	0x40011000
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020000 	.word	0x40020000

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c0:	4c0b      	ldr	r4, [pc, #44]	; (80012f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ce:	f7ff fef3 	bl	80010b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f002 fda7 	bl	8003e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff fceb 	bl	8000cb0 <main>
  bx  lr    
 80012da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012e8:	080047d8 	.word	0x080047d8
  ldr r2, =_sbss
 80012ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012f0:	20000210 	.word	0x20000210

080012f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <HAL_Init+0x40>)
 8001302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_Init+0x40>)
 800130e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x40>)
 800131a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 fcd8 	bl	8001cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	200f      	movs	r0, #15
 8001328:	f7ff fdde 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff fdb4 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023c00 	.word	0x40023c00

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008
 8001360:	200001fc 	.word	0x200001fc

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200001fc 	.word	0x200001fc

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000008 	.word	0x20000008

080013c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e033      	b.n	8001442 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff f930 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d118      	bne.n	8001434 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800140a:	f023 0302 	bic.w	r3, r3, #2
 800140e:	f043 0202 	orr.w	r2, r3, #2
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fab4 	bl	8001984 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f023 0303 	bic.w	r3, r3, #3
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	641a      	str	r2, [r3, #64]	; 0x40
 8001432:	e001      	b.n	8001438 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_ADC_Start+0x1a>
 8001462:	2302      	movs	r3, #2
 8001464:	e0b2      	b.n	80015cc <HAL_ADC_Start+0x180>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d018      	beq.n	80014ae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800148c:	4b52      	ldr	r3, [pc, #328]	; (80015d8 <HAL_ADC_Start+0x18c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a52      	ldr	r2, [pc, #328]	; (80015dc <HAL_ADC_Start+0x190>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0c9a      	lsrs	r2, r3, #18
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014a0:	e002      	b.n	80014a8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f9      	bne.n	80014a2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d17a      	bne.n	80015b2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014fa:	d106      	bne.n	800150a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	f023 0206 	bic.w	r2, r3, #6
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	645a      	str	r2, [r3, #68]	; 0x44
 8001508:	e002      	b.n	8001510 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001518:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <HAL_ADC_Start+0x194>)
 800151a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001524:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	2b00      	cmp	r3, #0
 8001530:	d12a      	bne.n	8001588 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a2b      	ldr	r2, [pc, #172]	; (80015e4 <HAL_ADC_Start+0x198>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d015      	beq.n	8001568 <HAL_ADC_Start+0x11c>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <HAL_ADC_Start+0x19c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d105      	bne.n	8001552 <HAL_ADC_Start+0x106>
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_ADC_Start+0x194>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00a      	beq.n	8001568 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a25      	ldr	r2, [pc, #148]	; (80015ec <HAL_ADC_Start+0x1a0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d136      	bne.n	80015ca <HAL_ADC_Start+0x17e>
 800155c:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <HAL_ADC_Start+0x194>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2b00      	cmp	r3, #0
 8001566:	d130      	bne.n	80015ca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d129      	bne.n	80015ca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	e020      	b.n	80015ca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <HAL_ADC_Start+0x198>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d11b      	bne.n	80015ca <HAL_ADC_Start+0x17e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d114      	bne.n	80015ca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e00b      	b.n	80015ca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f043 0210 	orr.w	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f043 0201 	orr.w	r2, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	20000000 	.word	0x20000000
 80015dc:	431bde83 	.word	0x431bde83
 80015e0:	40012300 	.word	0x40012300
 80015e4:	40012000 	.word	0x40012000
 80015e8:	40012100 	.word	0x40012100
 80015ec:	40012200 	.word	0x40012200

080015f0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160c:	d113      	bne.n	8001636 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800161c:	d10b      	bne.n	8001636 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f043 0220 	orr.w	r2, r3, #32
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e063      	b.n	80016fe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001636:	f7ff fe95 	bl	8001364 <HAL_GetTick>
 800163a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800163c:	e021      	b.n	8001682 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001644:	d01d      	beq.n	8001682 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <HAL_ADC_PollForConversion+0x6c>
 800164c:	f7ff fe8a 	bl	8001364 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d212      	bcs.n	8001682 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b02      	cmp	r3, #2
 8001668:	d00b      	beq.n	8001682 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f043 0204 	orr.w	r2, r3, #4
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e03d      	b.n	80016fe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b02      	cmp	r3, #2
 800168e:	d1d6      	bne.n	800163e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0212 	mvn.w	r2, #18
 8001698:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d123      	bne.n	80016fc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d11f      	bne.n	80016fc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d111      	bne.n	80016fc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_ADC_ConfigChannel+0x1c>
 8001738:	2302      	movs	r3, #2
 800173a:	e113      	b.n	8001964 <HAL_ADC_ConfigChannel+0x244>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b09      	cmp	r3, #9
 800174a:	d925      	bls.n	8001798 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68d9      	ldr	r1, [r3, #12]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	3b1e      	subs	r3, #30
 8001762:	2207      	movs	r2, #7
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43da      	mvns	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	400a      	ands	r2, r1
 8001770:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68d9      	ldr	r1, [r3, #12]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	4618      	mov	r0, r3
 8001784:	4603      	mov	r3, r0
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4403      	add	r3, r0
 800178a:	3b1e      	subs	r3, #30
 800178c:	409a      	lsls	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	e022      	b.n	80017de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6919      	ldr	r1, [r3, #16]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	2207      	movs	r2, #7
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	400a      	ands	r2, r1
 80017ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6919      	ldr	r1, [r3, #16]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	4603      	mov	r3, r0
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4403      	add	r3, r0
 80017d4:	409a      	lsls	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d824      	bhi.n	8001830 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	3b05      	subs	r3, #5
 80017f8:	221f      	movs	r2, #31
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	400a      	ands	r2, r1
 8001806:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	b29b      	uxth	r3, r3
 8001814:	4618      	mov	r0, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	3b05      	subs	r3, #5
 8001822:	fa00 f203 	lsl.w	r2, r0, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
 800182e:	e04c      	b.n	80018ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b0c      	cmp	r3, #12
 8001836:	d824      	bhi.n	8001882 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	3b23      	subs	r3, #35	; 0x23
 800184a:	221f      	movs	r2, #31
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43da      	mvns	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	400a      	ands	r2, r1
 8001858:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	3b23      	subs	r3, #35	; 0x23
 8001874:	fa00 f203 	lsl.w	r2, r0, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
 8001880:	e023      	b.n	80018ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	3b41      	subs	r3, #65	; 0x41
 8001894:	221f      	movs	r2, #31
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	400a      	ands	r2, r1
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	4618      	mov	r0, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	3b41      	subs	r3, #65	; 0x41
 80018be:	fa00 f203 	lsl.w	r2, r0, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <HAL_ADC_ConfigChannel+0x250>)
 80018cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a28      	ldr	r2, [pc, #160]	; (8001974 <HAL_ADC_ConfigChannel+0x254>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d10f      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x1d8>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b12      	cmp	r3, #18
 80018de:	d10b      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <HAL_ADC_ConfigChannel+0x254>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d12b      	bne.n	800195a <HAL_ADC_ConfigChannel+0x23a>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <HAL_ADC_ConfigChannel+0x258>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d003      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x1f4>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b11      	cmp	r3, #17
 8001912:	d122      	bne.n	800195a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a11      	ldr	r2, [pc, #68]	; (8001978 <HAL_ADC_ConfigChannel+0x258>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d111      	bne.n	800195a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_ADC_ConfigChannel+0x25c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_ADC_ConfigChannel+0x260>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	0c9a      	lsrs	r2, r3, #18
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800194c:	e002      	b.n	8001954 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3b01      	subs	r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f9      	bne.n	800194e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40012300 	.word	0x40012300
 8001974:	40012000 	.word	0x40012000
 8001978:	10000012 	.word	0x10000012
 800197c:	20000000 	.word	0x20000000
 8001980:	431bde83 	.word	0x431bde83

08001984 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800198c:	4b79      	ldr	r3, [pc, #484]	; (8001b74 <ADC_Init+0x1f0>)
 800198e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	431a      	orrs	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	021a      	lsls	r2, r3, #8
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6899      	ldr	r1, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	4a58      	ldr	r2, [pc, #352]	; (8001b78 <ADC_Init+0x1f4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d022      	beq.n	8001a62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6899      	ldr	r1, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6899      	ldr	r1, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	e00f      	b.n	8001a82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0202 	bic.w	r2, r2, #2
 8001a90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6899      	ldr	r1, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7e1b      	ldrb	r3, [r3, #24]
 8001a9c:	005a      	lsls	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01b      	beq.n	8001ae8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001abe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ace:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6859      	ldr	r1, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	3b01      	subs	r3, #1
 8001adc:	035a      	lsls	r2, r3, #13
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	e007      	b.n	8001af8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	051a      	lsls	r2, r3, #20
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6899      	ldr	r1, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b3a:	025a      	lsls	r2, r3, #9
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6899      	ldr	r1, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	029a      	lsls	r2, r3, #10
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	609a      	str	r2, [r3, #8]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40012300 	.word	0x40012300
 8001b78:	0f000001 	.word	0x0f000001

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ff4c 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfe:	f7ff ff61 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	6978      	ldr	r0, [r7, #20]
 8001d0a:	f7ff ffb1 	bl	8001c70 <NVIC_EncodePriority>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff80 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d1c:	bf00      	nop
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff54 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00e      	b.n	8001d70 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	795b      	ldrb	r3, [r3, #5]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe fcc8 	bl	80006f8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	e177      	b.n	8002084 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	f040 8166 	bne.w	800207e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d005      	beq.n	8001dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d130      	bne.n	8001e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e00:	2201      	movs	r2, #1
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 0201 	and.w	r2, r3, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d017      	beq.n	8001e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d123      	bne.n	8001ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	69b9      	ldr	r1, [r7, #24]
 8001eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80c0 	beq.w	800207e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b66      	ldr	r3, [pc, #408]	; (800209c <HAL_GPIO_Init+0x324>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a65      	ldr	r2, [pc, #404]	; (800209c <HAL_GPIO_Init+0x324>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b63      	ldr	r3, [pc, #396]	; (800209c <HAL_GPIO_Init+0x324>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1a:	4a61      	ldr	r2, [pc, #388]	; (80020a0 <HAL_GPIO_Init+0x328>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	220f      	movs	r2, #15
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a58      	ldr	r2, [pc, #352]	; (80020a4 <HAL_GPIO_Init+0x32c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d037      	beq.n	8001fb6 <HAL_GPIO_Init+0x23e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a57      	ldr	r2, [pc, #348]	; (80020a8 <HAL_GPIO_Init+0x330>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d031      	beq.n	8001fb2 <HAL_GPIO_Init+0x23a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a56      	ldr	r2, [pc, #344]	; (80020ac <HAL_GPIO_Init+0x334>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d02b      	beq.n	8001fae <HAL_GPIO_Init+0x236>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a55      	ldr	r2, [pc, #340]	; (80020b0 <HAL_GPIO_Init+0x338>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d025      	beq.n	8001faa <HAL_GPIO_Init+0x232>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a54      	ldr	r2, [pc, #336]	; (80020b4 <HAL_GPIO_Init+0x33c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <HAL_GPIO_Init+0x22e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <HAL_GPIO_Init+0x340>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d019      	beq.n	8001fa2 <HAL_GPIO_Init+0x22a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_GPIO_Init+0x344>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0x226>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a51      	ldr	r2, [pc, #324]	; (80020c0 <HAL_GPIO_Init+0x348>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00d      	beq.n	8001f9a <HAL_GPIO_Init+0x222>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a50      	ldr	r2, [pc, #320]	; (80020c4 <HAL_GPIO_Init+0x34c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x21e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4f      	ldr	r2, [pc, #316]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_GPIO_Init+0x21a>
 8001f8e:	2309      	movs	r3, #9
 8001f90:	e012      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f92:	230a      	movs	r3, #10
 8001f94:	e010      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f96:	2308      	movs	r3, #8
 8001f98:	e00e      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	e00c      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f9e:	2306      	movs	r3, #6
 8001fa0:	e00a      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	e008      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e004      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	f002 0203 	and.w	r2, r2, #3
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc8:	4935      	ldr	r1, [pc, #212]	; (80020a0 <HAL_GPIO_Init+0x328>)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_GPIO_Init+0x354>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffa:	4a34      	ldr	r2, [pc, #208]	; (80020cc <HAL_GPIO_Init+0x354>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002000:	4b32      	ldr	r3, [pc, #200]	; (80020cc <HAL_GPIO_Init+0x354>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002024:	4a29      	ldr	r2, [pc, #164]	; (80020cc <HAL_GPIO_Init+0x354>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800202a:	4b28      	ldr	r3, [pc, #160]	; (80020cc <HAL_GPIO_Init+0x354>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800204e:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <HAL_GPIO_Init+0x354>)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_GPIO_Init+0x354>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <HAL_GPIO_Init+0x354>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3301      	adds	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	f67f ae84 	bls.w	8001d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40013800 	.word	0x40013800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020c00 	.word	0x40020c00
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40021400 	.word	0x40021400
 80020bc:	40021800 	.word	0x40021800
 80020c0:	40021c00 	.word	0x40021c00
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40022400 	.word	0x40022400
 80020cc:	40013c00 	.word	0x40013c00

080020d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	e001      	b.n	80020f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
 800210c:	4613      	mov	r3, r2
 800210e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002110:	787b      	ldrb	r3, [r7, #1]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002116:	887a      	ldrh	r2, [r7, #2]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800211c:	e003      	b.n	8002126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800211e:	887b      	ldrh	r3, [r7, #2]
 8002120:	041a      	lsls	r2, r3, #16
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	619a      	str	r2, [r3, #24]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002144:	887a      	ldrh	r2, [r7, #2]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4013      	ands	r3, r2
 800214a:	041a      	lsls	r2, r3, #16
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	43d9      	mvns	r1, r3
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	400b      	ands	r3, r1
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	619a      	str	r2, [r3, #24]
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_PWREx_EnableOverDrive+0x94>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002194:	f7ff f8e6 	bl	8001364 <HAL_GetTick>
 8002198:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800219a:	e009      	b.n	80021b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800219c:	f7ff f8e2 	bl	8001364 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021aa:	d901      	bls.n	80021b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e01f      	b.n	80021f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <HAL_PWREx_EnableOverDrive+0x98>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d1ee      	bne.n	800219c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c4:	f7ff f8ce 	bl	8001364 <HAL_GetTick>
 80021c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021ca:	e009      	b.n	80021e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021cc:	f7ff f8ca 	bl	8001364 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021da:	d901      	bls.n	80021e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e007      	b.n	80021f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_PWREx_EnableOverDrive+0x98>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021ec:	d1ee      	bne.n	80021cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40023800 	.word	0x40023800
 80021fc:	420e0040 	.word	0x420e0040
 8002200:	40007000 	.word	0x40007000
 8002204:	420e0044 	.word	0x420e0044

08002208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e267      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d075      	beq.n	8002312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002226:	4b88      	ldr	r3, [pc, #544]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b04      	cmp	r3, #4
 8002230:	d00c      	beq.n	800224c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002232:	4b85      	ldr	r3, [pc, #532]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800223a:	2b08      	cmp	r3, #8
 800223c:	d112      	bne.n	8002264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223e:	4b82      	ldr	r3, [pc, #520]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800224a:	d10b      	bne.n	8002264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	4b7e      	ldr	r3, [pc, #504]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d05b      	beq.n	8002310 <HAL_RCC_OscConfig+0x108>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d157      	bne.n	8002310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e242      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226c:	d106      	bne.n	800227c <HAL_RCC_OscConfig+0x74>
 800226e:	4b76      	ldr	r3, [pc, #472]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a75      	ldr	r2, [pc, #468]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e01d      	b.n	80022b8 <HAL_RCC_OscConfig+0xb0>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x98>
 8002286:	4b70      	ldr	r3, [pc, #448]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a6f      	ldr	r2, [pc, #444]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b6d      	ldr	r3, [pc, #436]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6c      	ldr	r2, [pc, #432]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0xb0>
 80022a0:	4b69      	ldr	r3, [pc, #420]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a68      	ldr	r2, [pc, #416]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b66      	ldr	r3, [pc, #408]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a65      	ldr	r2, [pc, #404]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d013      	beq.n	80022e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff f850 	bl	8001364 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff f84c 	bl	8001364 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e207      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b5b      	ldr	r3, [pc, #364]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0xc0>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff f83c 	bl	8001364 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f0:	f7ff f838 	bl	8001364 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e1f3      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0xe8>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d063      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800231e:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002332:	2b08      	cmp	r3, #8
 8002334:	d11c      	bne.n	8002370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002336:	4b44      	ldr	r3, [pc, #272]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d116      	bne.n	8002370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	4b41      	ldr	r3, [pc, #260]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_RCC_OscConfig+0x152>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e1c7      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4937      	ldr	r1, [pc, #220]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	e03a      	b.n	80023e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002378:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCC_OscConfig+0x244>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fff1 	bl	8001364 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002386:	f7fe ffed 	bl	8001364 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e1a8      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b28      	ldr	r3, [pc, #160]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4925      	ldr	r1, [pc, #148]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
 80023b8:	e015      	b.n	80023e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <HAL_RCC_OscConfig+0x244>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe ffd0 	bl	8001364 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c8:	f7fe ffcc 	bl	8001364 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e187      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d036      	beq.n	8002460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d016      	beq.n	8002428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_RCC_OscConfig+0x248>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7fe ffb0 	bl	8001364 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002408:	f7fe ffac 	bl	8001364 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e167      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800241c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x200>
 8002426:	e01b      	b.n	8002460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCC_OscConfig+0x248>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7fe ff99 	bl	8001364 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	e00e      	b.n	8002454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002436:	f7fe ff95 	bl	8001364 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d907      	bls.n	8002454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e150      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
 8002448:	40023800 	.word	0x40023800
 800244c:	42470000 	.word	0x42470000
 8002450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	4b88      	ldr	r3, [pc, #544]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ea      	bne.n	8002436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8097 	beq.w	800259c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002472:	4b81      	ldr	r3, [pc, #516]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	4b7d      	ldr	r3, [pc, #500]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a7c      	ldr	r2, [pc, #496]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b7a      	ldr	r3, [pc, #488]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b77      	ldr	r3, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x474>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4b74      	ldr	r3, [pc, #464]	; (800267c <HAL_RCC_OscConfig+0x474>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a73      	ldr	r2, [pc, #460]	; (800267c <HAL_RCC_OscConfig+0x474>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7fe ff55 	bl	8001364 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7fe ff51 	bl	8001364 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e10c      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x474>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2ea>
 80024e4:	4b64      	ldr	r3, [pc, #400]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a63      	ldr	r2, [pc, #396]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	e01c      	b.n	800252c <HAL_RCC_OscConfig+0x324>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x30c>
 80024fa:	4b5f      	ldr	r3, [pc, #380]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a5e      	ldr	r2, [pc, #376]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	4b5c      	ldr	r3, [pc, #368]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a5b      	ldr	r2, [pc, #364]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0x324>
 8002514:	4b58      	ldr	r3, [pc, #352]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a57      	ldr	r2, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
 8002520:	4b55      	ldr	r3, [pc, #340]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	4a54      	ldr	r2, [pc, #336]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002526:	f023 0304 	bic.w	r3, r3, #4
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d015      	beq.n	8002560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe ff16 	bl	8001364 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	e00a      	b.n	8002552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7fe ff12 	bl	8001364 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0cb      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	4b49      	ldr	r3, [pc, #292]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0ee      	beq.n	800253c <HAL_RCC_OscConfig+0x334>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002560:	f7fe ff00 	bl	8001364 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7fe fefc 	bl	8001364 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0b5      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257e:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ee      	bne.n	8002568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002590:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	4a38      	ldr	r2, [pc, #224]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80a1 	beq.w	80026e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025a6:	4b34      	ldr	r3, [pc, #208]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d05c      	beq.n	800266c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d141      	bne.n	800263e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCC_OscConfig+0x478>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fed0 	bl	8001364 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fecc 	bl	8001364 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e087      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	3b01      	subs	r3, #1
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	061b      	lsls	r3, r3, #24
 800260a:	491b      	ldr	r1, [pc, #108]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x478>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7fe fea5 	bl	8001364 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261e:	f7fe fea1 	bl	8001364 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e05c      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x416>
 800263c:	e054      	b.n	80026e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_OscConfig+0x478>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fe8e 	bl	8001364 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264c:	f7fe fe8a 	bl	8001364 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e045      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x444>
 800266a:	e03d      	b.n	80026e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d107      	bne.n	8002684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e038      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
 8002678:	40023800 	.word	0x40023800
 800267c:	40007000 	.word	0x40007000
 8002680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x4ec>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d028      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d121      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d11a      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026b4:	4013      	ands	r3, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026bc:	4293      	cmp	r3, r2
 80026be:	d111      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	3b01      	subs	r3, #1
 80026ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800

080026f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0cc      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800270c:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d90c      	bls.n	8002734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b65      	ldr	r3, [pc, #404]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0b8      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800274c:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a58      	ldr	r2, [pc, #352]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002764:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a52      	ldr	r2, [pc, #328]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800276e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	494d      	ldr	r1, [pc, #308]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d044      	beq.n	8002818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d119      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d003      	beq.n	80027b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b6:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e06f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e067      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4934      	ldr	r1, [pc, #208]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e8:	f7fe fdbc 	bl	8001364 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe fdb8 	bl	8001364 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e04f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 020c 	and.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1eb      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d20c      	bcs.n	8002840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e032      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4916      	ldr	r1, [pc, #88]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	490e      	ldr	r1, [pc, #56]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800287e:	f000 f821 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002882:	4602      	mov	r2, r0
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	490a      	ldr	r1, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fb22 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023c00 	.word	0x40023c00
 80028b4:	40023800 	.word	0x40023800
 80028b8:	0800477c 	.word	0x0800477c
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c8:	b094      	sub	sp, #80	; 0x50
 80028ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	647b      	str	r3, [r7, #68]	; 0x44
 80028d0:	2300      	movs	r3, #0
 80028d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d4:	2300      	movs	r3, #0
 80028d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028dc:	4b79      	ldr	r3, [pc, #484]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d00d      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x40>
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	f200 80e1 	bhi.w	8002ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x34>
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d003      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x3a>
 80028f6:	e0db      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b73      	ldr	r3, [pc, #460]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028fc:	e0db      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028fe:	4b73      	ldr	r3, [pc, #460]	; (8002acc <HAL_RCC_GetSysClockFreq+0x208>)
 8002900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002902:	e0d8      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002904:	4b6f      	ldr	r3, [pc, #444]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800290c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800290e:	4b6d      	ldr	r3, [pc, #436]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d063      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291a:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	099b      	lsrs	r3, r3, #6
 8002920:	2200      	movs	r2, #0
 8002922:	63bb      	str	r3, [r7, #56]	; 0x38
 8002924:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292c:	633b      	str	r3, [r7, #48]	; 0x30
 800292e:	2300      	movs	r3, #0
 8002930:	637b      	str	r3, [r7, #52]	; 0x34
 8002932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002936:	4622      	mov	r2, r4
 8002938:	462b      	mov	r3, r5
 800293a:	f04f 0000 	mov.w	r0, #0
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	0159      	lsls	r1, r3, #5
 8002944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002948:	0150      	lsls	r0, r2, #5
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4621      	mov	r1, r4
 8002950:	1a51      	subs	r1, r2, r1
 8002952:	6139      	str	r1, [r7, #16]
 8002954:	4629      	mov	r1, r5
 8002956:	eb63 0301 	sbc.w	r3, r3, r1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002968:	4659      	mov	r1, fp
 800296a:	018b      	lsls	r3, r1, #6
 800296c:	4651      	mov	r1, sl
 800296e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002972:	4651      	mov	r1, sl
 8002974:	018a      	lsls	r2, r1, #6
 8002976:	4651      	mov	r1, sl
 8002978:	ebb2 0801 	subs.w	r8, r2, r1
 800297c:	4659      	mov	r1, fp
 800297e:	eb63 0901 	sbc.w	r9, r3, r1
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800298e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002996:	4690      	mov	r8, r2
 8002998:	4699      	mov	r9, r3
 800299a:	4623      	mov	r3, r4
 800299c:	eb18 0303 	adds.w	r3, r8, r3
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	462b      	mov	r3, r5
 80029a4:	eb49 0303 	adc.w	r3, r9, r3
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029b6:	4629      	mov	r1, r5
 80029b8:	024b      	lsls	r3, r1, #9
 80029ba:	4621      	mov	r1, r4
 80029bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029c0:	4621      	mov	r1, r4
 80029c2:	024a      	lsls	r2, r1, #9
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ca:	2200      	movs	r2, #0
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029d4:	f7fd fc64 	bl	80002a0 <__aeabi_uldivmod>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4613      	mov	r3, r2
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e0:	e058      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e2:	4b38      	ldr	r3, [pc, #224]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	099b      	lsrs	r3, r3, #6
 80029e8:	2200      	movs	r2, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	4611      	mov	r1, r2
 80029ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	2300      	movs	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
 80029f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029fc:	4642      	mov	r2, r8
 80029fe:	464b      	mov	r3, r9
 8002a00:	f04f 0000 	mov.w	r0, #0
 8002a04:	f04f 0100 	mov.w	r1, #0
 8002a08:	0159      	lsls	r1, r3, #5
 8002a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a0e:	0150      	lsls	r0, r2, #5
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4641      	mov	r1, r8
 8002a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a34:	ebb2 040a 	subs.w	r4, r2, sl
 8002a38:	eb63 050b 	sbc.w	r5, r3, fp
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	00eb      	lsls	r3, r5, #3
 8002a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a4a:	00e2      	lsls	r2, r4, #3
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	461d      	mov	r5, r3
 8002a50:	4643      	mov	r3, r8
 8002a52:	18e3      	adds	r3, r4, r3
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	464b      	mov	r3, r9
 8002a58:	eb45 0303 	adc.w	r3, r5, r3
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	028b      	lsls	r3, r1, #10
 8002a6e:	4621      	mov	r1, r4
 8002a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a74:	4621      	mov	r1, r4
 8002a76:	028a      	lsls	r2, r1, #10
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	61fa      	str	r2, [r7, #28]
 8002a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a88:	f7fd fc0a 	bl	80002a0 <__aeabi_uldivmod>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4613      	mov	r3, r2
 8002a92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aae:	e002      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3750      	adds	r7, #80	; 0x50
 8002abc:	46bd      	mov	sp, r7
 8002abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	00f42400 	.word	0x00f42400
 8002acc:	007a1200 	.word	0x007a1200

08002ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000000 	.word	0x20000000

08002ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aec:	f7ff fff0 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0a9b      	lsrs	r3, r3, #10
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	0800478c 	.word	0x0800478c

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b14:	f7ff ffdc 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0b5b      	lsrs	r3, r3, #13
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4903      	ldr	r1, [pc, #12]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40023800 	.word	0x40023800
 8002b34:	0800478c 	.word	0x0800478c

08002b38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	220f      	movs	r2, #15
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <HAL_RCC_GetClockConfig+0x5c>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0203 	and.w	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <HAL_RCC_GetClockConfig+0x5c>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <HAL_RCC_GetClockConfig+0x5c>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_GetClockConfig+0x5c>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	08db      	lsrs	r3, r3, #3
 8002b72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <HAL_RCC_GetClockConfig+0x60>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	601a      	str	r2, [r3, #0]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40023c00 	.word	0x40023c00

08002b9c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e025      	b.n	8002bfc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d106      	bne.n	8002bca <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fd fe9b 	bl	8000900 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4610      	mov	r0, r2
 8002bde:	f001 f855 	bl	8003c8c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	461a      	mov	r2, r3
 8002bec:	6839      	ldr	r1, [r7, #0]
 8002bee:	f001 f8aa 	bl	8003d46 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e041      	b.n	8002c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe faa6 	bl	800117c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f000 fa96 	bl	8003174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d001      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e04e      	b.n	8002d5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <HAL_TIM_Base_Start_IT+0xc4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d022      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce6:	d01d      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <HAL_TIM_Base_Start_IT+0xc8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d018      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <HAL_TIM_Base_Start_IT+0xcc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00e      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d009      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d004      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a18      	ldr	r2, [pc, #96]	; (8002d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d111      	bne.n	8002d48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d010      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0201 	orr.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d46:	e007      	b.n	8002d58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	40000400 	.word	0x40000400
 8002d70:	40000800 	.word	0x40000800
 8002d74:	40000c00 	.word	0x40000c00
 8002d78:	40010400 	.word	0x40010400
 8002d7c:	40014000 	.word	0x40014000
 8002d80:	40001800 	.word	0x40001800

08002d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d122      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d11b      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0202 	mvn.w	r2, #2
 8002db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f9b5 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002dcc:	e005      	b.n	8002dda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f9a7 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f9b8 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d122      	bne.n	8002e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d11b      	bne.n	8002e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0204 	mvn.w	r2, #4
 8002e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f98b 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f97d 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f98e 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d122      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d11b      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0208 	mvn.w	r2, #8
 8002e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f961 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002e74:	e005      	b.n	8002e82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f953 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f964 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d122      	bne.n	8002edc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b10      	cmp	r3, #16
 8002ea2:	d11b      	bne.n	8002edc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0210 	mvn.w	r2, #16
 8002eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f937 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f929 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f93a 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10e      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d107      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0201 	mvn.w	r2, #1
 8002f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd ffb0 	bl	8000e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f12:	2b80      	cmp	r3, #128	; 0x80
 8002f14:	d10e      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f20:	2b80      	cmp	r3, #128	; 0x80
 8002f22:	d107      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fae0 	bl	80034f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	d10e      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d107      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8ff 	bl	800315e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d10e      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d107      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0220 	mvn.w	r2, #32
 8002f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 faaa 	bl	80034e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0b4      	b.n	800311a <HAL_TIM_ConfigClockSource+0x186>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe8:	d03e      	beq.n	8003068 <HAL_TIM_ConfigClockSource+0xd4>
 8002fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fee:	f200 8087 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff6:	f000 8086 	beq.w	8003106 <HAL_TIM_ConfigClockSource+0x172>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	d87f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b70      	cmp	r3, #112	; 0x70
 8003002:	d01a      	beq.n	800303a <HAL_TIM_ConfigClockSource+0xa6>
 8003004:	2b70      	cmp	r3, #112	; 0x70
 8003006:	d87b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b60      	cmp	r3, #96	; 0x60
 800300a:	d050      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x11a>
 800300c:	2b60      	cmp	r3, #96	; 0x60
 800300e:	d877      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b50      	cmp	r3, #80	; 0x50
 8003012:	d03c      	beq.n	800308e <HAL_TIM_ConfigClockSource+0xfa>
 8003014:	2b50      	cmp	r3, #80	; 0x50
 8003016:	d873      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d058      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x13a>
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d86f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b30      	cmp	r3, #48	; 0x30
 8003022:	d064      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003024:	2b30      	cmp	r3, #48	; 0x30
 8003026:	d86b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d060      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d867      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05c      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003034:	2b10      	cmp	r3, #16
 8003036:	d05a      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	e062      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f000 f9ad 	bl	80033a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800305c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	609a      	str	r2, [r3, #8]
      break;
 8003066:	e04f      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f000 f996 	bl	80033a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308a:	609a      	str	r2, [r3, #8]
      break;
 800308c:	e03c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	461a      	mov	r2, r3
 800309c:	f000 f90a 	bl	80032b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2150      	movs	r1, #80	; 0x50
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f963 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030ac:	e02c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f000 f929 	bl	8003312 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2160      	movs	r1, #96	; 0x60
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f953 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030cc:	e01c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	461a      	mov	r2, r3
 80030dc:	f000 f8ea 	bl	80032b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f943 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030ec:	e00c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 f93a 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030fe:	e003      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e000      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a40      	ldr	r2, [pc, #256]	; (8003288 <TIM_Base_SetConfig+0x114>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <TIM_Base_SetConfig+0x40>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003192:	d00f      	beq.n	80031b4 <TIM_Base_SetConfig+0x40>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a3d      	ldr	r2, [pc, #244]	; (800328c <TIM_Base_SetConfig+0x118>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00b      	beq.n	80031b4 <TIM_Base_SetConfig+0x40>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a3c      	ldr	r2, [pc, #240]	; (8003290 <TIM_Base_SetConfig+0x11c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d007      	beq.n	80031b4 <TIM_Base_SetConfig+0x40>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <TIM_Base_SetConfig+0x120>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_Base_SetConfig+0x40>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a3a      	ldr	r2, [pc, #232]	; (8003298 <TIM_Base_SetConfig+0x124>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d108      	bne.n	80031c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2f      	ldr	r2, [pc, #188]	; (8003288 <TIM_Base_SetConfig+0x114>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d02b      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d027      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a2c      	ldr	r2, [pc, #176]	; (800328c <TIM_Base_SetConfig+0x118>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d023      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <TIM_Base_SetConfig+0x11c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01f      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a2a      	ldr	r2, [pc, #168]	; (8003294 <TIM_Base_SetConfig+0x120>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01b      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a29      	ldr	r2, [pc, #164]	; (8003298 <TIM_Base_SetConfig+0x124>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d017      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a28      	ldr	r2, [pc, #160]	; (800329c <TIM_Base_SetConfig+0x128>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a27      	ldr	r2, [pc, #156]	; (80032a0 <TIM_Base_SetConfig+0x12c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00f      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <TIM_Base_SetConfig+0x130>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a25      	ldr	r2, [pc, #148]	; (80032a8 <TIM_Base_SetConfig+0x134>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a24      	ldr	r2, [pc, #144]	; (80032ac <TIM_Base_SetConfig+0x138>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a23      	ldr	r2, [pc, #140]	; (80032b0 <TIM_Base_SetConfig+0x13c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <TIM_Base_SetConfig+0x114>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_Base_SetConfig+0xf8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <TIM_Base_SetConfig+0x124>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d103      	bne.n	8003274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	615a      	str	r2, [r3, #20]
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40010000 	.word	0x40010000
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800
 8003294:	40000c00 	.word	0x40000c00
 8003298:	40010400 	.word	0x40010400
 800329c:	40014000 	.word	0x40014000
 80032a0:	40014400 	.word	0x40014400
 80032a4:	40014800 	.word	0x40014800
 80032a8:	40001800 	.word	0x40001800
 80032ac:	40001c00 	.word	0x40001c00
 80032b0:	40002000 	.word	0x40002000

080032b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 030a 	bic.w	r3, r3, #10
 80032f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003312:	b480      	push	{r7}
 8003314:	b087      	sub	sp, #28
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f023 0210 	bic.w	r2, r3, #16
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800333c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	031b      	lsls	r3, r3, #12
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800334e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	f043 0307 	orr.w	r3, r3, #7
 8003394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	609a      	str	r2, [r3, #8]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	021a      	lsls	r2, r3, #8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e05a      	b.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d022      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344c:	d01d      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d018      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1a      	ldr	r2, [pc, #104]	; (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00e      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d009      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a15      	ldr	r2, [pc, #84]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10c      	bne.n	80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4313      	orrs	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40010400 	.word	0x40010400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40001800 	.word	0x40001800

080034e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e03f      	b.n	800359a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd fe70 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	; 0x24
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800354a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f929 	bl	80037a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b08a      	sub	sp, #40	; 0x28
 80035a6:	af02      	add	r7, sp, #8
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d17c      	bne.n	80036bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_UART_Transmit+0x2c>
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e075      	b.n	80036be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x3e>
 80035dc:	2302      	movs	r3, #2
 80035de:	e06e      	b.n	80036be <HAL_UART_Transmit+0x11c>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2221      	movs	r2, #33	; 0x21
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035f6:	f7fd feb5 	bl	8001364 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003610:	d108      	bne.n	8003624 <HAL_UART_Transmit+0x82>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d104      	bne.n	8003624 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e003      	b.n	800362c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003628:	2300      	movs	r3, #0
 800362a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003634:	e02a      	b.n	800368c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f840 	bl	80036c6 <UART_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e036      	b.n	80036be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10b      	bne.n	800366e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	3302      	adds	r3, #2
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e007      	b.n	800367e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	3301      	adds	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1cf      	bne.n	8003636 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2200      	movs	r2, #0
 800369e:	2140      	movs	r1, #64	; 0x40
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f810 	bl	80036c6 <UART_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e006      	b.n	80036be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b090      	sub	sp, #64	; 0x40
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d6:	e050      	b.n	800377a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036de:	d04c      	beq.n	800377a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80036e6:	f7fd fe3d 	bl	8001364 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d241      	bcs.n	800377a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003716:	637a      	str	r2, [r7, #52]	; 0x34
 8003718:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e5      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3314      	adds	r3, #20
 8003730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	613b      	str	r3, [r7, #16]
   return(result);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	63bb      	str	r3, [r7, #56]	; 0x38
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800374a:	623a      	str	r2, [r7, #32]
 800374c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	69f9      	ldr	r1, [r7, #28]
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	61bb      	str	r3, [r7, #24]
   return(result);
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e5      	bne.n	800372a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e00f      	b.n	800379a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4013      	ands	r3, r2
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	bf0c      	ite	eq
 800378a:	2301      	moveq	r3, #1
 800378c:	2300      	movne	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	429a      	cmp	r2, r3
 8003796:	d09f      	beq.n	80036d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3740      	adds	r7, #64	; 0x40
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a8:	b0c0      	sub	sp, #256	; 0x100
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	68d9      	ldr	r1, [r3, #12]
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	ea40 0301 	orr.w	r3, r0, r1
 80037cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	431a      	orrs	r2, r3
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037fc:	f021 010c 	bic.w	r1, r1, #12
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800380a:	430b      	orrs	r3, r1
 800380c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800380e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	6999      	ldr	r1, [r3, #24]
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	ea40 0301 	orr.w	r3, r0, r1
 800382a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b8f      	ldr	r3, [pc, #572]	; (8003a70 <UART_SetConfig+0x2cc>)
 8003834:	429a      	cmp	r2, r3
 8003836:	d005      	beq.n	8003844 <UART_SetConfig+0xa0>
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b8d      	ldr	r3, [pc, #564]	; (8003a74 <UART_SetConfig+0x2d0>)
 8003840:	429a      	cmp	r2, r3
 8003842:	d104      	bne.n	800384e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003844:	f7ff f964 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8003848:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800384c:	e003      	b.n	8003856 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800384e:	f7ff f94b 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8003852:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003860:	f040 810c 	bne.w	8003a7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003868:	2200      	movs	r2, #0
 800386a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800386e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003872:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003876:	4622      	mov	r2, r4
 8003878:	462b      	mov	r3, r5
 800387a:	1891      	adds	r1, r2, r2
 800387c:	65b9      	str	r1, [r7, #88]	; 0x58
 800387e:	415b      	adcs	r3, r3
 8003880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003882:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003886:	4621      	mov	r1, r4
 8003888:	eb12 0801 	adds.w	r8, r2, r1
 800388c:	4629      	mov	r1, r5
 800388e:	eb43 0901 	adc.w	r9, r3, r1
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800389e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038a6:	4690      	mov	r8, r2
 80038a8:	4699      	mov	r9, r3
 80038aa:	4623      	mov	r3, r4
 80038ac:	eb18 0303 	adds.w	r3, r8, r3
 80038b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038b4:	462b      	mov	r3, r5
 80038b6:	eb49 0303 	adc.w	r3, r9, r3
 80038ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038d2:	460b      	mov	r3, r1
 80038d4:	18db      	adds	r3, r3, r3
 80038d6:	653b      	str	r3, [r7, #80]	; 0x50
 80038d8:	4613      	mov	r3, r2
 80038da:	eb42 0303 	adc.w	r3, r2, r3
 80038de:	657b      	str	r3, [r7, #84]	; 0x54
 80038e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038e8:	f7fc fcda 	bl	80002a0 <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4b61      	ldr	r3, [pc, #388]	; (8003a78 <UART_SetConfig+0x2d4>)
 80038f2:	fba3 2302 	umull	r2, r3, r3, r2
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	011c      	lsls	r4, r3, #4
 80038fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003904:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003908:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800390c:	4642      	mov	r2, r8
 800390e:	464b      	mov	r3, r9
 8003910:	1891      	adds	r1, r2, r2
 8003912:	64b9      	str	r1, [r7, #72]	; 0x48
 8003914:	415b      	adcs	r3, r3
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003918:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800391c:	4641      	mov	r1, r8
 800391e:	eb12 0a01 	adds.w	sl, r2, r1
 8003922:	4649      	mov	r1, r9
 8003924:	eb43 0b01 	adc.w	fp, r3, r1
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003934:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800393c:	4692      	mov	sl, r2
 800393e:	469b      	mov	fp, r3
 8003940:	4643      	mov	r3, r8
 8003942:	eb1a 0303 	adds.w	r3, sl, r3
 8003946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800394a:	464b      	mov	r3, r9
 800394c:	eb4b 0303 	adc.w	r3, fp, r3
 8003950:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003960:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003964:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003968:	460b      	mov	r3, r1
 800396a:	18db      	adds	r3, r3, r3
 800396c:	643b      	str	r3, [r7, #64]	; 0x40
 800396e:	4613      	mov	r3, r2
 8003970:	eb42 0303 	adc.w	r3, r2, r3
 8003974:	647b      	str	r3, [r7, #68]	; 0x44
 8003976:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800397a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800397e:	f7fc fc8f 	bl	80002a0 <__aeabi_uldivmod>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4611      	mov	r1, r2
 8003988:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <UART_SetConfig+0x2d4>)
 800398a:	fba3 2301 	umull	r2, r3, r3, r1
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	2264      	movs	r2, #100	; 0x64
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	1acb      	subs	r3, r1, r3
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800399e:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <UART_SetConfig+0x2d4>)
 80039a0:	fba3 2302 	umull	r2, r3, r3, r2
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039ac:	441c      	add	r4, r3
 80039ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039c0:	4642      	mov	r2, r8
 80039c2:	464b      	mov	r3, r9
 80039c4:	1891      	adds	r1, r2, r2
 80039c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80039c8:	415b      	adcs	r3, r3
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039d0:	4641      	mov	r1, r8
 80039d2:	1851      	adds	r1, r2, r1
 80039d4:	6339      	str	r1, [r7, #48]	; 0x30
 80039d6:	4649      	mov	r1, r9
 80039d8:	414b      	adcs	r3, r1
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039e8:	4659      	mov	r1, fp
 80039ea:	00cb      	lsls	r3, r1, #3
 80039ec:	4651      	mov	r1, sl
 80039ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f2:	4651      	mov	r1, sl
 80039f4:	00ca      	lsls	r2, r1, #3
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	4642      	mov	r2, r8
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a04:	464b      	mov	r3, r9
 8003a06:	460a      	mov	r2, r1
 8003a08:	eb42 0303 	adc.w	r3, r2, r3
 8003a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a24:	460b      	mov	r3, r1
 8003a26:	18db      	adds	r3, r3, r3
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	eb42 0303 	adc.w	r3, r2, r3
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a3a:	f7fc fc31 	bl	80002a0 <__aeabi_uldivmod>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <UART_SetConfig+0x2d4>)
 8003a44:	fba3 1302 	umull	r1, r3, r3, r2
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	2164      	movs	r1, #100	; 0x64
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	3332      	adds	r3, #50	; 0x32
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <UART_SetConfig+0x2d4>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	f003 0207 	and.w	r2, r3, #7
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4422      	add	r2, r4
 8003a6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a6c:	e105      	b.n	8003c7a <UART_SetConfig+0x4d6>
 8003a6e:	bf00      	nop
 8003a70:	40011000 	.word	0x40011000
 8003a74:	40011400 	.word	0x40011400
 8003a78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a8e:	4642      	mov	r2, r8
 8003a90:	464b      	mov	r3, r9
 8003a92:	1891      	adds	r1, r2, r2
 8003a94:	6239      	str	r1, [r7, #32]
 8003a96:	415b      	adcs	r3, r3
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	1854      	adds	r4, r2, r1
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	eb43 0501 	adc.w	r5, r3, r1
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	00eb      	lsls	r3, r5, #3
 8003ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ab6:	00e2      	lsls	r2, r4, #3
 8003ab8:	4614      	mov	r4, r2
 8003aba:	461d      	mov	r5, r3
 8003abc:	4643      	mov	r3, r8
 8003abe:	18e3      	adds	r3, r4, r3
 8003ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	eb45 0303 	adc.w	r3, r5, r3
 8003aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ada:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003aea:	4629      	mov	r1, r5
 8003aec:	008b      	lsls	r3, r1, #2
 8003aee:	4621      	mov	r1, r4
 8003af0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af4:	4621      	mov	r1, r4
 8003af6:	008a      	lsls	r2, r1, #2
 8003af8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003afc:	f7fc fbd0 	bl	80002a0 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4b60      	ldr	r3, [pc, #384]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003b06:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	011c      	lsls	r4, r3, #4
 8003b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	1891      	adds	r1, r2, r2
 8003b26:	61b9      	str	r1, [r7, #24]
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b30:	4641      	mov	r1, r8
 8003b32:	1851      	adds	r1, r2, r1
 8003b34:	6139      	str	r1, [r7, #16]
 8003b36:	4649      	mov	r1, r9
 8003b38:	414b      	adcs	r3, r1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b48:	4659      	mov	r1, fp
 8003b4a:	00cb      	lsls	r3, r1, #3
 8003b4c:	4651      	mov	r1, sl
 8003b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b52:	4651      	mov	r1, sl
 8003b54:	00ca      	lsls	r2, r1, #3
 8003b56:	4610      	mov	r0, r2
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	189b      	adds	r3, r3, r2
 8003b60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b64:	464b      	mov	r3, r9
 8003b66:	460a      	mov	r2, r1
 8003b68:	eb42 0303 	adc.w	r3, r2, r3
 8003b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b88:	4649      	mov	r1, r9
 8003b8a:	008b      	lsls	r3, r1, #2
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b92:	4641      	mov	r1, r8
 8003b94:	008a      	lsls	r2, r1, #2
 8003b96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b9a:	f7fc fb81 	bl	80002a0 <__aeabi_uldivmod>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4b39      	ldr	r3, [pc, #228]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	2164      	movs	r1, #100	; 0x64
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	3332      	adds	r3, #50	; 0x32
 8003bb6:	4a34      	ldr	r2, [pc, #208]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc2:	441c      	add	r4, r3
 8003bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc8:	2200      	movs	r2, #0
 8003bca:	673b      	str	r3, [r7, #112]	; 0x70
 8003bcc:	677a      	str	r2, [r7, #116]	; 0x74
 8003bce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bd2:	4642      	mov	r2, r8
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	1891      	adds	r1, r2, r2
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	415b      	adcs	r3, r3
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be2:	4641      	mov	r1, r8
 8003be4:	1851      	adds	r1, r2, r1
 8003be6:	6039      	str	r1, [r7, #0]
 8003be8:	4649      	mov	r1, r9
 8003bea:	414b      	adcs	r3, r1
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bfa:	4659      	mov	r1, fp
 8003bfc:	00cb      	lsls	r3, r1, #3
 8003bfe:	4651      	mov	r1, sl
 8003c00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c04:	4651      	mov	r1, sl
 8003c06:	00ca      	lsls	r2, r1, #3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4642      	mov	r2, r8
 8003c10:	189b      	adds	r3, r3, r2
 8003c12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c14:	464b      	mov	r3, r9
 8003c16:	460a      	mov	r2, r1
 8003c18:	eb42 0303 	adc.w	r3, r2, r3
 8003c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	663b      	str	r3, [r7, #96]	; 0x60
 8003c28:	667a      	str	r2, [r7, #100]	; 0x64
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c36:	4649      	mov	r1, r9
 8003c38:	008b      	lsls	r3, r1, #2
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c40:	4641      	mov	r1, r8
 8003c42:	008a      	lsls	r2, r1, #2
 8003c44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c48:	f7fc fb2a 	bl	80002a0 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003c52:	fba3 1302 	umull	r1, r3, r3, r2
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2164      	movs	r1, #100	; 0x64
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	3332      	adds	r3, #50	; 0x32
 8003c64:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	f003 020f 	and.w	r2, r3, #15
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4422      	add	r2, r4
 8003c78:	609a      	str	r2, [r3, #8]
}
 8003c7a:	bf00      	nop
 8003c7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c80:	46bd      	mov	sp, r7
 8003c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c86:	bf00      	nop
 8003c88:	51eb851f 	.word	0x51eb851f

08003c8c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d123      	bne.n	8003ce6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	6851      	ldr	r1, [r2, #4]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	6892      	ldr	r2, [r2, #8]
 8003cb2:	4311      	orrs	r1, r2
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	68d2      	ldr	r2, [r2, #12]
 8003cb8:	4311      	orrs	r1, r2
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	6912      	ldr	r2, [r2, #16]
 8003cbe:	4311      	orrs	r1, r2
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	6952      	ldr	r2, [r2, #20]
 8003cc4:	4311      	orrs	r1, r2
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	6992      	ldr	r2, [r2, #24]
 8003cca:	4311      	orrs	r1, r2
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	69d2      	ldr	r2, [r2, #28]
 8003cd0:	4311      	orrs	r1, r2
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	6a12      	ldr	r2, [r2, #32]
 8003cd6:	4311      	orrs	r1, r2
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e028      	b.n	8003d38 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	69d9      	ldr	r1, [r3, #28]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	4319      	orrs	r1, r3
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	6851      	ldr	r1, [r2, #4]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	6892      	ldr	r2, [r2, #8]
 8003d18:	4311      	orrs	r1, r2
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	68d2      	ldr	r2, [r2, #12]
 8003d1e:	4311      	orrs	r1, r2
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	6912      	ldr	r2, [r2, #16]
 8003d24:	4311      	orrs	r1, r2
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	6952      	ldr	r2, [r2, #20]
 8003d2a:	4311      	orrs	r1, r2
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	6992      	ldr	r2, [r2, #24]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d128      	bne.n	8003daa <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	1e59      	subs	r1, r3, #1
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4319      	orrs	r1, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	021b      	lsls	r3, r3, #8
 8003d78:	4319      	orrs	r1, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	031b      	lsls	r3, r3, #12
 8003d82:	4319      	orrs	r1, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	4319      	orrs	r1, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	051b      	lsls	r3, r3, #20
 8003d96:	4319      	orrs	r1, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	061b      	lsls	r3, r3, #24
 8003da0:	430b      	orrs	r3, r1
 8003da2:	431a      	orrs	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	e02f      	b.n	8003e0a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003db2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	68d2      	ldr	r2, [r2, #12]
 8003dba:	3a01      	subs	r2, #1
 8003dbc:	0311      	lsls	r1, r2, #12
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	6952      	ldr	r2, [r2, #20]
 8003dc2:	3a01      	subs	r2, #1
 8003dc4:	0512      	lsls	r2, r2, #20
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	1e59      	subs	r1, r3, #1
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	4319      	orrs	r1, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	4319      	orrs	r1, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	4319      	orrs	r1, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	430b      	orrs	r3, r1
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <__errno>:
 8003e18:	4b01      	ldr	r3, [pc, #4]	; (8003e20 <__errno+0x8>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	2000000c 	.word	0x2000000c

08003e24 <__libc_init_array>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	4d0d      	ldr	r5, [pc, #52]	; (8003e5c <__libc_init_array+0x38>)
 8003e28:	4c0d      	ldr	r4, [pc, #52]	; (8003e60 <__libc_init_array+0x3c>)
 8003e2a:	1b64      	subs	r4, r4, r5
 8003e2c:	10a4      	asrs	r4, r4, #2
 8003e2e:	2600      	movs	r6, #0
 8003e30:	42a6      	cmp	r6, r4
 8003e32:	d109      	bne.n	8003e48 <__libc_init_array+0x24>
 8003e34:	4d0b      	ldr	r5, [pc, #44]	; (8003e64 <__libc_init_array+0x40>)
 8003e36:	4c0c      	ldr	r4, [pc, #48]	; (8003e68 <__libc_init_array+0x44>)
 8003e38:	f000 fc8e 	bl	8004758 <_init>
 8003e3c:	1b64      	subs	r4, r4, r5
 8003e3e:	10a4      	asrs	r4, r4, #2
 8003e40:	2600      	movs	r6, #0
 8003e42:	42a6      	cmp	r6, r4
 8003e44:	d105      	bne.n	8003e52 <__libc_init_array+0x2e>
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4c:	4798      	blx	r3
 8003e4e:	3601      	adds	r6, #1
 8003e50:	e7ee      	b.n	8003e30 <__libc_init_array+0xc>
 8003e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e56:	4798      	blx	r3
 8003e58:	3601      	adds	r6, #1
 8003e5a:	e7f2      	b.n	8003e42 <__libc_init_array+0x1e>
 8003e5c:	080047d0 	.word	0x080047d0
 8003e60:	080047d0 	.word	0x080047d0
 8003e64:	080047d0 	.word	0x080047d0
 8003e68:	080047d4 	.word	0x080047d4

08003e6c <memset>:
 8003e6c:	4402      	add	r2, r0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d100      	bne.n	8003e76 <memset+0xa>
 8003e74:	4770      	bx	lr
 8003e76:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7a:	e7f9      	b.n	8003e70 <memset+0x4>

08003e7c <siprintf>:
 8003e7c:	b40e      	push	{r1, r2, r3}
 8003e7e:	b500      	push	{lr}
 8003e80:	b09c      	sub	sp, #112	; 0x70
 8003e82:	ab1d      	add	r3, sp, #116	; 0x74
 8003e84:	9002      	str	r0, [sp, #8]
 8003e86:	9006      	str	r0, [sp, #24]
 8003e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e8c:	4809      	ldr	r0, [pc, #36]	; (8003eb4 <siprintf+0x38>)
 8003e8e:	9107      	str	r1, [sp, #28]
 8003e90:	9104      	str	r1, [sp, #16]
 8003e92:	4909      	ldr	r1, [pc, #36]	; (8003eb8 <siprintf+0x3c>)
 8003e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e98:	9105      	str	r1, [sp, #20]
 8003e9a:	6800      	ldr	r0, [r0, #0]
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	a902      	add	r1, sp, #8
 8003ea0:	f000 f868 	bl	8003f74 <_svfiprintf_r>
 8003ea4:	9b02      	ldr	r3, [sp, #8]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	b01c      	add	sp, #112	; 0x70
 8003eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eb0:	b003      	add	sp, #12
 8003eb2:	4770      	bx	lr
 8003eb4:	2000000c 	.word	0x2000000c
 8003eb8:	ffff0208 	.word	0xffff0208

08003ebc <__ssputs_r>:
 8003ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec0:	688e      	ldr	r6, [r1, #8]
 8003ec2:	429e      	cmp	r6, r3
 8003ec4:	4682      	mov	sl, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	4690      	mov	r8, r2
 8003eca:	461f      	mov	r7, r3
 8003ecc:	d838      	bhi.n	8003f40 <__ssputs_r+0x84>
 8003ece:	898a      	ldrh	r2, [r1, #12]
 8003ed0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ed4:	d032      	beq.n	8003f3c <__ssputs_r+0x80>
 8003ed6:	6825      	ldr	r5, [r4, #0]
 8003ed8:	6909      	ldr	r1, [r1, #16]
 8003eda:	eba5 0901 	sub.w	r9, r5, r1
 8003ede:	6965      	ldr	r5, [r4, #20]
 8003ee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ee8:	3301      	adds	r3, #1
 8003eea:	444b      	add	r3, r9
 8003eec:	106d      	asrs	r5, r5, #1
 8003eee:	429d      	cmp	r5, r3
 8003ef0:	bf38      	it	cc
 8003ef2:	461d      	movcc	r5, r3
 8003ef4:	0553      	lsls	r3, r2, #21
 8003ef6:	d531      	bpl.n	8003f5c <__ssputs_r+0xa0>
 8003ef8:	4629      	mov	r1, r5
 8003efa:	f000 fb63 	bl	80045c4 <_malloc_r>
 8003efe:	4606      	mov	r6, r0
 8003f00:	b950      	cbnz	r0, 8003f18 <__ssputs_r+0x5c>
 8003f02:	230c      	movs	r3, #12
 8003f04:	f8ca 3000 	str.w	r3, [sl]
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f0e:	81a3      	strh	r3, [r4, #12]
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f18:	6921      	ldr	r1, [r4, #16]
 8003f1a:	464a      	mov	r2, r9
 8003f1c:	f000 fabe 	bl	800449c <memcpy>
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2a:	81a3      	strh	r3, [r4, #12]
 8003f2c:	6126      	str	r6, [r4, #16]
 8003f2e:	6165      	str	r5, [r4, #20]
 8003f30:	444e      	add	r6, r9
 8003f32:	eba5 0509 	sub.w	r5, r5, r9
 8003f36:	6026      	str	r6, [r4, #0]
 8003f38:	60a5      	str	r5, [r4, #8]
 8003f3a:	463e      	mov	r6, r7
 8003f3c:	42be      	cmp	r6, r7
 8003f3e:	d900      	bls.n	8003f42 <__ssputs_r+0x86>
 8003f40:	463e      	mov	r6, r7
 8003f42:	6820      	ldr	r0, [r4, #0]
 8003f44:	4632      	mov	r2, r6
 8003f46:	4641      	mov	r1, r8
 8003f48:	f000 fab6 	bl	80044b8 <memmove>
 8003f4c:	68a3      	ldr	r3, [r4, #8]
 8003f4e:	1b9b      	subs	r3, r3, r6
 8003f50:	60a3      	str	r3, [r4, #8]
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	4433      	add	r3, r6
 8003f56:	6023      	str	r3, [r4, #0]
 8003f58:	2000      	movs	r0, #0
 8003f5a:	e7db      	b.n	8003f14 <__ssputs_r+0x58>
 8003f5c:	462a      	mov	r2, r5
 8003f5e:	f000 fba5 	bl	80046ac <_realloc_r>
 8003f62:	4606      	mov	r6, r0
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d1e1      	bne.n	8003f2c <__ssputs_r+0x70>
 8003f68:	6921      	ldr	r1, [r4, #16]
 8003f6a:	4650      	mov	r0, sl
 8003f6c:	f000 fabe 	bl	80044ec <_free_r>
 8003f70:	e7c7      	b.n	8003f02 <__ssputs_r+0x46>
	...

08003f74 <_svfiprintf_r>:
 8003f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f78:	4698      	mov	r8, r3
 8003f7a:	898b      	ldrh	r3, [r1, #12]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	b09d      	sub	sp, #116	; 0x74
 8003f80:	4607      	mov	r7, r0
 8003f82:	460d      	mov	r5, r1
 8003f84:	4614      	mov	r4, r2
 8003f86:	d50e      	bpl.n	8003fa6 <_svfiprintf_r+0x32>
 8003f88:	690b      	ldr	r3, [r1, #16]
 8003f8a:	b963      	cbnz	r3, 8003fa6 <_svfiprintf_r+0x32>
 8003f8c:	2140      	movs	r1, #64	; 0x40
 8003f8e:	f000 fb19 	bl	80045c4 <_malloc_r>
 8003f92:	6028      	str	r0, [r5, #0]
 8003f94:	6128      	str	r0, [r5, #16]
 8003f96:	b920      	cbnz	r0, 8003fa2 <_svfiprintf_r+0x2e>
 8003f98:	230c      	movs	r3, #12
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fa0:	e0d1      	b.n	8004146 <_svfiprintf_r+0x1d2>
 8003fa2:	2340      	movs	r3, #64	; 0x40
 8003fa4:	616b      	str	r3, [r5, #20]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8003faa:	2320      	movs	r3, #32
 8003fac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fb4:	2330      	movs	r3, #48	; 0x30
 8003fb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004160 <_svfiprintf_r+0x1ec>
 8003fba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fbe:	f04f 0901 	mov.w	r9, #1
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	469a      	mov	sl, r3
 8003fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fca:	b10a      	cbz	r2, 8003fd0 <_svfiprintf_r+0x5c>
 8003fcc:	2a25      	cmp	r2, #37	; 0x25
 8003fce:	d1f9      	bne.n	8003fc4 <_svfiprintf_r+0x50>
 8003fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8003fd4:	d00b      	beq.n	8003fee <_svfiprintf_r+0x7a>
 8003fd6:	465b      	mov	r3, fp
 8003fd8:	4622      	mov	r2, r4
 8003fda:	4629      	mov	r1, r5
 8003fdc:	4638      	mov	r0, r7
 8003fde:	f7ff ff6d 	bl	8003ebc <__ssputs_r>
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	f000 80aa 	beq.w	800413c <_svfiprintf_r+0x1c8>
 8003fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fea:	445a      	add	r2, fp
 8003fec:	9209      	str	r2, [sp, #36]	; 0x24
 8003fee:	f89a 3000 	ldrb.w	r3, [sl]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80a2 	beq.w	800413c <_svfiprintf_r+0x1c8>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004002:	f10a 0a01 	add.w	sl, sl, #1
 8004006:	9304      	str	r3, [sp, #16]
 8004008:	9307      	str	r3, [sp, #28]
 800400a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800400e:	931a      	str	r3, [sp, #104]	; 0x68
 8004010:	4654      	mov	r4, sl
 8004012:	2205      	movs	r2, #5
 8004014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004018:	4851      	ldr	r0, [pc, #324]	; (8004160 <_svfiprintf_r+0x1ec>)
 800401a:	f7fc f8f1 	bl	8000200 <memchr>
 800401e:	9a04      	ldr	r2, [sp, #16]
 8004020:	b9d8      	cbnz	r0, 800405a <_svfiprintf_r+0xe6>
 8004022:	06d0      	lsls	r0, r2, #27
 8004024:	bf44      	itt	mi
 8004026:	2320      	movmi	r3, #32
 8004028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800402c:	0711      	lsls	r1, r2, #28
 800402e:	bf44      	itt	mi
 8004030:	232b      	movmi	r3, #43	; 0x2b
 8004032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004036:	f89a 3000 	ldrb.w	r3, [sl]
 800403a:	2b2a      	cmp	r3, #42	; 0x2a
 800403c:	d015      	beq.n	800406a <_svfiprintf_r+0xf6>
 800403e:	9a07      	ldr	r2, [sp, #28]
 8004040:	4654      	mov	r4, sl
 8004042:	2000      	movs	r0, #0
 8004044:	f04f 0c0a 	mov.w	ip, #10
 8004048:	4621      	mov	r1, r4
 800404a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800404e:	3b30      	subs	r3, #48	; 0x30
 8004050:	2b09      	cmp	r3, #9
 8004052:	d94e      	bls.n	80040f2 <_svfiprintf_r+0x17e>
 8004054:	b1b0      	cbz	r0, 8004084 <_svfiprintf_r+0x110>
 8004056:	9207      	str	r2, [sp, #28]
 8004058:	e014      	b.n	8004084 <_svfiprintf_r+0x110>
 800405a:	eba0 0308 	sub.w	r3, r0, r8
 800405e:	fa09 f303 	lsl.w	r3, r9, r3
 8004062:	4313      	orrs	r3, r2
 8004064:	9304      	str	r3, [sp, #16]
 8004066:	46a2      	mov	sl, r4
 8004068:	e7d2      	b.n	8004010 <_svfiprintf_r+0x9c>
 800406a:	9b03      	ldr	r3, [sp, #12]
 800406c:	1d19      	adds	r1, r3, #4
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	9103      	str	r1, [sp, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	bfbb      	ittet	lt
 8004076:	425b      	neglt	r3, r3
 8004078:	f042 0202 	orrlt.w	r2, r2, #2
 800407c:	9307      	strge	r3, [sp, #28]
 800407e:	9307      	strlt	r3, [sp, #28]
 8004080:	bfb8      	it	lt
 8004082:	9204      	strlt	r2, [sp, #16]
 8004084:	7823      	ldrb	r3, [r4, #0]
 8004086:	2b2e      	cmp	r3, #46	; 0x2e
 8004088:	d10c      	bne.n	80040a4 <_svfiprintf_r+0x130>
 800408a:	7863      	ldrb	r3, [r4, #1]
 800408c:	2b2a      	cmp	r3, #42	; 0x2a
 800408e:	d135      	bne.n	80040fc <_svfiprintf_r+0x188>
 8004090:	9b03      	ldr	r3, [sp, #12]
 8004092:	1d1a      	adds	r2, r3, #4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	9203      	str	r2, [sp, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	bfb8      	it	lt
 800409c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80040a0:	3402      	adds	r4, #2
 80040a2:	9305      	str	r3, [sp, #20]
 80040a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004170 <_svfiprintf_r+0x1fc>
 80040a8:	7821      	ldrb	r1, [r4, #0]
 80040aa:	2203      	movs	r2, #3
 80040ac:	4650      	mov	r0, sl
 80040ae:	f7fc f8a7 	bl	8000200 <memchr>
 80040b2:	b140      	cbz	r0, 80040c6 <_svfiprintf_r+0x152>
 80040b4:	2340      	movs	r3, #64	; 0x40
 80040b6:	eba0 000a 	sub.w	r0, r0, sl
 80040ba:	fa03 f000 	lsl.w	r0, r3, r0
 80040be:	9b04      	ldr	r3, [sp, #16]
 80040c0:	4303      	orrs	r3, r0
 80040c2:	3401      	adds	r4, #1
 80040c4:	9304      	str	r3, [sp, #16]
 80040c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ca:	4826      	ldr	r0, [pc, #152]	; (8004164 <_svfiprintf_r+0x1f0>)
 80040cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040d0:	2206      	movs	r2, #6
 80040d2:	f7fc f895 	bl	8000200 <memchr>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d038      	beq.n	800414c <_svfiprintf_r+0x1d8>
 80040da:	4b23      	ldr	r3, [pc, #140]	; (8004168 <_svfiprintf_r+0x1f4>)
 80040dc:	bb1b      	cbnz	r3, 8004126 <_svfiprintf_r+0x1b2>
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	3307      	adds	r3, #7
 80040e2:	f023 0307 	bic.w	r3, r3, #7
 80040e6:	3308      	adds	r3, #8
 80040e8:	9303      	str	r3, [sp, #12]
 80040ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ec:	4433      	add	r3, r6
 80040ee:	9309      	str	r3, [sp, #36]	; 0x24
 80040f0:	e767      	b.n	8003fc2 <_svfiprintf_r+0x4e>
 80040f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80040f6:	460c      	mov	r4, r1
 80040f8:	2001      	movs	r0, #1
 80040fa:	e7a5      	b.n	8004048 <_svfiprintf_r+0xd4>
 80040fc:	2300      	movs	r3, #0
 80040fe:	3401      	adds	r4, #1
 8004100:	9305      	str	r3, [sp, #20]
 8004102:	4619      	mov	r1, r3
 8004104:	f04f 0c0a 	mov.w	ip, #10
 8004108:	4620      	mov	r0, r4
 800410a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800410e:	3a30      	subs	r2, #48	; 0x30
 8004110:	2a09      	cmp	r2, #9
 8004112:	d903      	bls.n	800411c <_svfiprintf_r+0x1a8>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0c5      	beq.n	80040a4 <_svfiprintf_r+0x130>
 8004118:	9105      	str	r1, [sp, #20]
 800411a:	e7c3      	b.n	80040a4 <_svfiprintf_r+0x130>
 800411c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004120:	4604      	mov	r4, r0
 8004122:	2301      	movs	r3, #1
 8004124:	e7f0      	b.n	8004108 <_svfiprintf_r+0x194>
 8004126:	ab03      	add	r3, sp, #12
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	462a      	mov	r2, r5
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <_svfiprintf_r+0x1f8>)
 800412e:	a904      	add	r1, sp, #16
 8004130:	4638      	mov	r0, r7
 8004132:	f3af 8000 	nop.w
 8004136:	1c42      	adds	r2, r0, #1
 8004138:	4606      	mov	r6, r0
 800413a:	d1d6      	bne.n	80040ea <_svfiprintf_r+0x176>
 800413c:	89ab      	ldrh	r3, [r5, #12]
 800413e:	065b      	lsls	r3, r3, #25
 8004140:	f53f af2c 	bmi.w	8003f9c <_svfiprintf_r+0x28>
 8004144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004146:	b01d      	add	sp, #116	; 0x74
 8004148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414c:	ab03      	add	r3, sp, #12
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	462a      	mov	r2, r5
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <_svfiprintf_r+0x1f8>)
 8004154:	a904      	add	r1, sp, #16
 8004156:	4638      	mov	r0, r7
 8004158:	f000 f87a 	bl	8004250 <_printf_i>
 800415c:	e7eb      	b.n	8004136 <_svfiprintf_r+0x1c2>
 800415e:	bf00      	nop
 8004160:	08004794 	.word	0x08004794
 8004164:	0800479e 	.word	0x0800479e
 8004168:	00000000 	.word	0x00000000
 800416c:	08003ebd 	.word	0x08003ebd
 8004170:	0800479a 	.word	0x0800479a

08004174 <_printf_common>:
 8004174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004178:	4616      	mov	r6, r2
 800417a:	4699      	mov	r9, r3
 800417c:	688a      	ldr	r2, [r1, #8]
 800417e:	690b      	ldr	r3, [r1, #16]
 8004180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004184:	4293      	cmp	r3, r2
 8004186:	bfb8      	it	lt
 8004188:	4613      	movlt	r3, r2
 800418a:	6033      	str	r3, [r6, #0]
 800418c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004190:	4607      	mov	r7, r0
 8004192:	460c      	mov	r4, r1
 8004194:	b10a      	cbz	r2, 800419a <_printf_common+0x26>
 8004196:	3301      	adds	r3, #1
 8004198:	6033      	str	r3, [r6, #0]
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	0699      	lsls	r1, r3, #26
 800419e:	bf42      	ittt	mi
 80041a0:	6833      	ldrmi	r3, [r6, #0]
 80041a2:	3302      	addmi	r3, #2
 80041a4:	6033      	strmi	r3, [r6, #0]
 80041a6:	6825      	ldr	r5, [r4, #0]
 80041a8:	f015 0506 	ands.w	r5, r5, #6
 80041ac:	d106      	bne.n	80041bc <_printf_common+0x48>
 80041ae:	f104 0a19 	add.w	sl, r4, #25
 80041b2:	68e3      	ldr	r3, [r4, #12]
 80041b4:	6832      	ldr	r2, [r6, #0]
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	42ab      	cmp	r3, r5
 80041ba:	dc26      	bgt.n	800420a <_printf_common+0x96>
 80041bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041c0:	1e13      	subs	r3, r2, #0
 80041c2:	6822      	ldr	r2, [r4, #0]
 80041c4:	bf18      	it	ne
 80041c6:	2301      	movne	r3, #1
 80041c8:	0692      	lsls	r2, r2, #26
 80041ca:	d42b      	bmi.n	8004224 <_printf_common+0xb0>
 80041cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041d0:	4649      	mov	r1, r9
 80041d2:	4638      	mov	r0, r7
 80041d4:	47c0      	blx	r8
 80041d6:	3001      	adds	r0, #1
 80041d8:	d01e      	beq.n	8004218 <_printf_common+0xa4>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	68e5      	ldr	r5, [r4, #12]
 80041de:	6832      	ldr	r2, [r6, #0]
 80041e0:	f003 0306 	and.w	r3, r3, #6
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	bf08      	it	eq
 80041e8:	1aad      	subeq	r5, r5, r2
 80041ea:	68a3      	ldr	r3, [r4, #8]
 80041ec:	6922      	ldr	r2, [r4, #16]
 80041ee:	bf0c      	ite	eq
 80041f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041f4:	2500      	movne	r5, #0
 80041f6:	4293      	cmp	r3, r2
 80041f8:	bfc4      	itt	gt
 80041fa:	1a9b      	subgt	r3, r3, r2
 80041fc:	18ed      	addgt	r5, r5, r3
 80041fe:	2600      	movs	r6, #0
 8004200:	341a      	adds	r4, #26
 8004202:	42b5      	cmp	r5, r6
 8004204:	d11a      	bne.n	800423c <_printf_common+0xc8>
 8004206:	2000      	movs	r0, #0
 8004208:	e008      	b.n	800421c <_printf_common+0xa8>
 800420a:	2301      	movs	r3, #1
 800420c:	4652      	mov	r2, sl
 800420e:	4649      	mov	r1, r9
 8004210:	4638      	mov	r0, r7
 8004212:	47c0      	blx	r8
 8004214:	3001      	adds	r0, #1
 8004216:	d103      	bne.n	8004220 <_printf_common+0xac>
 8004218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004220:	3501      	adds	r5, #1
 8004222:	e7c6      	b.n	80041b2 <_printf_common+0x3e>
 8004224:	18e1      	adds	r1, r4, r3
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	2030      	movs	r0, #48	; 0x30
 800422a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800422e:	4422      	add	r2, r4
 8004230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004238:	3302      	adds	r3, #2
 800423a:	e7c7      	b.n	80041cc <_printf_common+0x58>
 800423c:	2301      	movs	r3, #1
 800423e:	4622      	mov	r2, r4
 8004240:	4649      	mov	r1, r9
 8004242:	4638      	mov	r0, r7
 8004244:	47c0      	blx	r8
 8004246:	3001      	adds	r0, #1
 8004248:	d0e6      	beq.n	8004218 <_printf_common+0xa4>
 800424a:	3601      	adds	r6, #1
 800424c:	e7d9      	b.n	8004202 <_printf_common+0x8e>
	...

08004250 <_printf_i>:
 8004250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004254:	7e0f      	ldrb	r7, [r1, #24]
 8004256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004258:	2f78      	cmp	r7, #120	; 0x78
 800425a:	4691      	mov	r9, r2
 800425c:	4680      	mov	r8, r0
 800425e:	460c      	mov	r4, r1
 8004260:	469a      	mov	sl, r3
 8004262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004266:	d807      	bhi.n	8004278 <_printf_i+0x28>
 8004268:	2f62      	cmp	r7, #98	; 0x62
 800426a:	d80a      	bhi.n	8004282 <_printf_i+0x32>
 800426c:	2f00      	cmp	r7, #0
 800426e:	f000 80d8 	beq.w	8004422 <_printf_i+0x1d2>
 8004272:	2f58      	cmp	r7, #88	; 0x58
 8004274:	f000 80a3 	beq.w	80043be <_printf_i+0x16e>
 8004278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800427c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004280:	e03a      	b.n	80042f8 <_printf_i+0xa8>
 8004282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004286:	2b15      	cmp	r3, #21
 8004288:	d8f6      	bhi.n	8004278 <_printf_i+0x28>
 800428a:	a101      	add	r1, pc, #4	; (adr r1, 8004290 <_printf_i+0x40>)
 800428c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004290:	080042e9 	.word	0x080042e9
 8004294:	080042fd 	.word	0x080042fd
 8004298:	08004279 	.word	0x08004279
 800429c:	08004279 	.word	0x08004279
 80042a0:	08004279 	.word	0x08004279
 80042a4:	08004279 	.word	0x08004279
 80042a8:	080042fd 	.word	0x080042fd
 80042ac:	08004279 	.word	0x08004279
 80042b0:	08004279 	.word	0x08004279
 80042b4:	08004279 	.word	0x08004279
 80042b8:	08004279 	.word	0x08004279
 80042bc:	08004409 	.word	0x08004409
 80042c0:	0800432d 	.word	0x0800432d
 80042c4:	080043eb 	.word	0x080043eb
 80042c8:	08004279 	.word	0x08004279
 80042cc:	08004279 	.word	0x08004279
 80042d0:	0800442b 	.word	0x0800442b
 80042d4:	08004279 	.word	0x08004279
 80042d8:	0800432d 	.word	0x0800432d
 80042dc:	08004279 	.word	0x08004279
 80042e0:	08004279 	.word	0x08004279
 80042e4:	080043f3 	.word	0x080043f3
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	1d1a      	adds	r2, r3, #4
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	602a      	str	r2, [r5, #0]
 80042f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0a3      	b.n	8004444 <_printf_i+0x1f4>
 80042fc:	6820      	ldr	r0, [r4, #0]
 80042fe:	6829      	ldr	r1, [r5, #0]
 8004300:	0606      	lsls	r6, r0, #24
 8004302:	f101 0304 	add.w	r3, r1, #4
 8004306:	d50a      	bpl.n	800431e <_printf_i+0xce>
 8004308:	680e      	ldr	r6, [r1, #0]
 800430a:	602b      	str	r3, [r5, #0]
 800430c:	2e00      	cmp	r6, #0
 800430e:	da03      	bge.n	8004318 <_printf_i+0xc8>
 8004310:	232d      	movs	r3, #45	; 0x2d
 8004312:	4276      	negs	r6, r6
 8004314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004318:	485e      	ldr	r0, [pc, #376]	; (8004494 <_printf_i+0x244>)
 800431a:	230a      	movs	r3, #10
 800431c:	e019      	b.n	8004352 <_printf_i+0x102>
 800431e:	680e      	ldr	r6, [r1, #0]
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004326:	bf18      	it	ne
 8004328:	b236      	sxthne	r6, r6
 800432a:	e7ef      	b.n	800430c <_printf_i+0xbc>
 800432c:	682b      	ldr	r3, [r5, #0]
 800432e:	6820      	ldr	r0, [r4, #0]
 8004330:	1d19      	adds	r1, r3, #4
 8004332:	6029      	str	r1, [r5, #0]
 8004334:	0601      	lsls	r1, r0, #24
 8004336:	d501      	bpl.n	800433c <_printf_i+0xec>
 8004338:	681e      	ldr	r6, [r3, #0]
 800433a:	e002      	b.n	8004342 <_printf_i+0xf2>
 800433c:	0646      	lsls	r6, r0, #25
 800433e:	d5fb      	bpl.n	8004338 <_printf_i+0xe8>
 8004340:	881e      	ldrh	r6, [r3, #0]
 8004342:	4854      	ldr	r0, [pc, #336]	; (8004494 <_printf_i+0x244>)
 8004344:	2f6f      	cmp	r7, #111	; 0x6f
 8004346:	bf0c      	ite	eq
 8004348:	2308      	moveq	r3, #8
 800434a:	230a      	movne	r3, #10
 800434c:	2100      	movs	r1, #0
 800434e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004352:	6865      	ldr	r5, [r4, #4]
 8004354:	60a5      	str	r5, [r4, #8]
 8004356:	2d00      	cmp	r5, #0
 8004358:	bfa2      	ittt	ge
 800435a:	6821      	ldrge	r1, [r4, #0]
 800435c:	f021 0104 	bicge.w	r1, r1, #4
 8004360:	6021      	strge	r1, [r4, #0]
 8004362:	b90e      	cbnz	r6, 8004368 <_printf_i+0x118>
 8004364:	2d00      	cmp	r5, #0
 8004366:	d04d      	beq.n	8004404 <_printf_i+0x1b4>
 8004368:	4615      	mov	r5, r2
 800436a:	fbb6 f1f3 	udiv	r1, r6, r3
 800436e:	fb03 6711 	mls	r7, r3, r1, r6
 8004372:	5dc7      	ldrb	r7, [r0, r7]
 8004374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004378:	4637      	mov	r7, r6
 800437a:	42bb      	cmp	r3, r7
 800437c:	460e      	mov	r6, r1
 800437e:	d9f4      	bls.n	800436a <_printf_i+0x11a>
 8004380:	2b08      	cmp	r3, #8
 8004382:	d10b      	bne.n	800439c <_printf_i+0x14c>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	07de      	lsls	r6, r3, #31
 8004388:	d508      	bpl.n	800439c <_printf_i+0x14c>
 800438a:	6923      	ldr	r3, [r4, #16]
 800438c:	6861      	ldr	r1, [r4, #4]
 800438e:	4299      	cmp	r1, r3
 8004390:	bfde      	ittt	le
 8004392:	2330      	movle	r3, #48	; 0x30
 8004394:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004398:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800439c:	1b52      	subs	r2, r2, r5
 800439e:	6122      	str	r2, [r4, #16]
 80043a0:	f8cd a000 	str.w	sl, [sp]
 80043a4:	464b      	mov	r3, r9
 80043a6:	aa03      	add	r2, sp, #12
 80043a8:	4621      	mov	r1, r4
 80043aa:	4640      	mov	r0, r8
 80043ac:	f7ff fee2 	bl	8004174 <_printf_common>
 80043b0:	3001      	adds	r0, #1
 80043b2:	d14c      	bne.n	800444e <_printf_i+0x1fe>
 80043b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043b8:	b004      	add	sp, #16
 80043ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043be:	4835      	ldr	r0, [pc, #212]	; (8004494 <_printf_i+0x244>)
 80043c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043c4:	6829      	ldr	r1, [r5, #0]
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80043cc:	6029      	str	r1, [r5, #0]
 80043ce:	061d      	lsls	r5, r3, #24
 80043d0:	d514      	bpl.n	80043fc <_printf_i+0x1ac>
 80043d2:	07df      	lsls	r7, r3, #31
 80043d4:	bf44      	itt	mi
 80043d6:	f043 0320 	orrmi.w	r3, r3, #32
 80043da:	6023      	strmi	r3, [r4, #0]
 80043dc:	b91e      	cbnz	r6, 80043e6 <_printf_i+0x196>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	f023 0320 	bic.w	r3, r3, #32
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	2310      	movs	r3, #16
 80043e8:	e7b0      	b.n	800434c <_printf_i+0xfc>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	f043 0320 	orr.w	r3, r3, #32
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	2378      	movs	r3, #120	; 0x78
 80043f4:	4828      	ldr	r0, [pc, #160]	; (8004498 <_printf_i+0x248>)
 80043f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043fa:	e7e3      	b.n	80043c4 <_printf_i+0x174>
 80043fc:	0659      	lsls	r1, r3, #25
 80043fe:	bf48      	it	mi
 8004400:	b2b6      	uxthmi	r6, r6
 8004402:	e7e6      	b.n	80043d2 <_printf_i+0x182>
 8004404:	4615      	mov	r5, r2
 8004406:	e7bb      	b.n	8004380 <_printf_i+0x130>
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	6826      	ldr	r6, [r4, #0]
 800440c:	6961      	ldr	r1, [r4, #20]
 800440e:	1d18      	adds	r0, r3, #4
 8004410:	6028      	str	r0, [r5, #0]
 8004412:	0635      	lsls	r5, r6, #24
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	d501      	bpl.n	800441c <_printf_i+0x1cc>
 8004418:	6019      	str	r1, [r3, #0]
 800441a:	e002      	b.n	8004422 <_printf_i+0x1d2>
 800441c:	0670      	lsls	r0, r6, #25
 800441e:	d5fb      	bpl.n	8004418 <_printf_i+0x1c8>
 8004420:	8019      	strh	r1, [r3, #0]
 8004422:	2300      	movs	r3, #0
 8004424:	6123      	str	r3, [r4, #16]
 8004426:	4615      	mov	r5, r2
 8004428:	e7ba      	b.n	80043a0 <_printf_i+0x150>
 800442a:	682b      	ldr	r3, [r5, #0]
 800442c:	1d1a      	adds	r2, r3, #4
 800442e:	602a      	str	r2, [r5, #0]
 8004430:	681d      	ldr	r5, [r3, #0]
 8004432:	6862      	ldr	r2, [r4, #4]
 8004434:	2100      	movs	r1, #0
 8004436:	4628      	mov	r0, r5
 8004438:	f7fb fee2 	bl	8000200 <memchr>
 800443c:	b108      	cbz	r0, 8004442 <_printf_i+0x1f2>
 800443e:	1b40      	subs	r0, r0, r5
 8004440:	6060      	str	r0, [r4, #4]
 8004442:	6863      	ldr	r3, [r4, #4]
 8004444:	6123      	str	r3, [r4, #16]
 8004446:	2300      	movs	r3, #0
 8004448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800444c:	e7a8      	b.n	80043a0 <_printf_i+0x150>
 800444e:	6923      	ldr	r3, [r4, #16]
 8004450:	462a      	mov	r2, r5
 8004452:	4649      	mov	r1, r9
 8004454:	4640      	mov	r0, r8
 8004456:	47d0      	blx	sl
 8004458:	3001      	adds	r0, #1
 800445a:	d0ab      	beq.n	80043b4 <_printf_i+0x164>
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	079b      	lsls	r3, r3, #30
 8004460:	d413      	bmi.n	800448a <_printf_i+0x23a>
 8004462:	68e0      	ldr	r0, [r4, #12]
 8004464:	9b03      	ldr	r3, [sp, #12]
 8004466:	4298      	cmp	r0, r3
 8004468:	bfb8      	it	lt
 800446a:	4618      	movlt	r0, r3
 800446c:	e7a4      	b.n	80043b8 <_printf_i+0x168>
 800446e:	2301      	movs	r3, #1
 8004470:	4632      	mov	r2, r6
 8004472:	4649      	mov	r1, r9
 8004474:	4640      	mov	r0, r8
 8004476:	47d0      	blx	sl
 8004478:	3001      	adds	r0, #1
 800447a:	d09b      	beq.n	80043b4 <_printf_i+0x164>
 800447c:	3501      	adds	r5, #1
 800447e:	68e3      	ldr	r3, [r4, #12]
 8004480:	9903      	ldr	r1, [sp, #12]
 8004482:	1a5b      	subs	r3, r3, r1
 8004484:	42ab      	cmp	r3, r5
 8004486:	dcf2      	bgt.n	800446e <_printf_i+0x21e>
 8004488:	e7eb      	b.n	8004462 <_printf_i+0x212>
 800448a:	2500      	movs	r5, #0
 800448c:	f104 0619 	add.w	r6, r4, #25
 8004490:	e7f5      	b.n	800447e <_printf_i+0x22e>
 8004492:	bf00      	nop
 8004494:	080047a5 	.word	0x080047a5
 8004498:	080047b6 	.word	0x080047b6

0800449c <memcpy>:
 800449c:	440a      	add	r2, r1
 800449e:	4291      	cmp	r1, r2
 80044a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80044a4:	d100      	bne.n	80044a8 <memcpy+0xc>
 80044a6:	4770      	bx	lr
 80044a8:	b510      	push	{r4, lr}
 80044aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044b2:	4291      	cmp	r1, r2
 80044b4:	d1f9      	bne.n	80044aa <memcpy+0xe>
 80044b6:	bd10      	pop	{r4, pc}

080044b8 <memmove>:
 80044b8:	4288      	cmp	r0, r1
 80044ba:	b510      	push	{r4, lr}
 80044bc:	eb01 0402 	add.w	r4, r1, r2
 80044c0:	d902      	bls.n	80044c8 <memmove+0x10>
 80044c2:	4284      	cmp	r4, r0
 80044c4:	4623      	mov	r3, r4
 80044c6:	d807      	bhi.n	80044d8 <memmove+0x20>
 80044c8:	1e43      	subs	r3, r0, #1
 80044ca:	42a1      	cmp	r1, r4
 80044cc:	d008      	beq.n	80044e0 <memmove+0x28>
 80044ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044d6:	e7f8      	b.n	80044ca <memmove+0x12>
 80044d8:	4402      	add	r2, r0
 80044da:	4601      	mov	r1, r0
 80044dc:	428a      	cmp	r2, r1
 80044de:	d100      	bne.n	80044e2 <memmove+0x2a>
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044ea:	e7f7      	b.n	80044dc <memmove+0x24>

080044ec <_free_r>:
 80044ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044ee:	2900      	cmp	r1, #0
 80044f0:	d044      	beq.n	800457c <_free_r+0x90>
 80044f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f6:	9001      	str	r0, [sp, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f1a1 0404 	sub.w	r4, r1, #4
 80044fe:	bfb8      	it	lt
 8004500:	18e4      	addlt	r4, r4, r3
 8004502:	f000 f913 	bl	800472c <__malloc_lock>
 8004506:	4a1e      	ldr	r2, [pc, #120]	; (8004580 <_free_r+0x94>)
 8004508:	9801      	ldr	r0, [sp, #4]
 800450a:	6813      	ldr	r3, [r2, #0]
 800450c:	b933      	cbnz	r3, 800451c <_free_r+0x30>
 800450e:	6063      	str	r3, [r4, #4]
 8004510:	6014      	str	r4, [r2, #0]
 8004512:	b003      	add	sp, #12
 8004514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004518:	f000 b90e 	b.w	8004738 <__malloc_unlock>
 800451c:	42a3      	cmp	r3, r4
 800451e:	d908      	bls.n	8004532 <_free_r+0x46>
 8004520:	6825      	ldr	r5, [r4, #0]
 8004522:	1961      	adds	r1, r4, r5
 8004524:	428b      	cmp	r3, r1
 8004526:	bf01      	itttt	eq
 8004528:	6819      	ldreq	r1, [r3, #0]
 800452a:	685b      	ldreq	r3, [r3, #4]
 800452c:	1949      	addeq	r1, r1, r5
 800452e:	6021      	streq	r1, [r4, #0]
 8004530:	e7ed      	b.n	800450e <_free_r+0x22>
 8004532:	461a      	mov	r2, r3
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	b10b      	cbz	r3, 800453c <_free_r+0x50>
 8004538:	42a3      	cmp	r3, r4
 800453a:	d9fa      	bls.n	8004532 <_free_r+0x46>
 800453c:	6811      	ldr	r1, [r2, #0]
 800453e:	1855      	adds	r5, r2, r1
 8004540:	42a5      	cmp	r5, r4
 8004542:	d10b      	bne.n	800455c <_free_r+0x70>
 8004544:	6824      	ldr	r4, [r4, #0]
 8004546:	4421      	add	r1, r4
 8004548:	1854      	adds	r4, r2, r1
 800454a:	42a3      	cmp	r3, r4
 800454c:	6011      	str	r1, [r2, #0]
 800454e:	d1e0      	bne.n	8004512 <_free_r+0x26>
 8004550:	681c      	ldr	r4, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	6053      	str	r3, [r2, #4]
 8004556:	4421      	add	r1, r4
 8004558:	6011      	str	r1, [r2, #0]
 800455a:	e7da      	b.n	8004512 <_free_r+0x26>
 800455c:	d902      	bls.n	8004564 <_free_r+0x78>
 800455e:	230c      	movs	r3, #12
 8004560:	6003      	str	r3, [r0, #0]
 8004562:	e7d6      	b.n	8004512 <_free_r+0x26>
 8004564:	6825      	ldr	r5, [r4, #0]
 8004566:	1961      	adds	r1, r4, r5
 8004568:	428b      	cmp	r3, r1
 800456a:	bf04      	itt	eq
 800456c:	6819      	ldreq	r1, [r3, #0]
 800456e:	685b      	ldreq	r3, [r3, #4]
 8004570:	6063      	str	r3, [r4, #4]
 8004572:	bf04      	itt	eq
 8004574:	1949      	addeq	r1, r1, r5
 8004576:	6021      	streq	r1, [r4, #0]
 8004578:	6054      	str	r4, [r2, #4]
 800457a:	e7ca      	b.n	8004512 <_free_r+0x26>
 800457c:	b003      	add	sp, #12
 800457e:	bd30      	pop	{r4, r5, pc}
 8004580:	20000200 	.word	0x20000200

08004584 <sbrk_aligned>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	4e0e      	ldr	r6, [pc, #56]	; (80045c0 <sbrk_aligned+0x3c>)
 8004588:	460c      	mov	r4, r1
 800458a:	6831      	ldr	r1, [r6, #0]
 800458c:	4605      	mov	r5, r0
 800458e:	b911      	cbnz	r1, 8004596 <sbrk_aligned+0x12>
 8004590:	f000 f8bc 	bl	800470c <_sbrk_r>
 8004594:	6030      	str	r0, [r6, #0]
 8004596:	4621      	mov	r1, r4
 8004598:	4628      	mov	r0, r5
 800459a:	f000 f8b7 	bl	800470c <_sbrk_r>
 800459e:	1c43      	adds	r3, r0, #1
 80045a0:	d00a      	beq.n	80045b8 <sbrk_aligned+0x34>
 80045a2:	1cc4      	adds	r4, r0, #3
 80045a4:	f024 0403 	bic.w	r4, r4, #3
 80045a8:	42a0      	cmp	r0, r4
 80045aa:	d007      	beq.n	80045bc <sbrk_aligned+0x38>
 80045ac:	1a21      	subs	r1, r4, r0
 80045ae:	4628      	mov	r0, r5
 80045b0:	f000 f8ac 	bl	800470c <_sbrk_r>
 80045b4:	3001      	adds	r0, #1
 80045b6:	d101      	bne.n	80045bc <sbrk_aligned+0x38>
 80045b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80045bc:	4620      	mov	r0, r4
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	20000204 	.word	0x20000204

080045c4 <_malloc_r>:
 80045c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c8:	1ccd      	adds	r5, r1, #3
 80045ca:	f025 0503 	bic.w	r5, r5, #3
 80045ce:	3508      	adds	r5, #8
 80045d0:	2d0c      	cmp	r5, #12
 80045d2:	bf38      	it	cc
 80045d4:	250c      	movcc	r5, #12
 80045d6:	2d00      	cmp	r5, #0
 80045d8:	4607      	mov	r7, r0
 80045da:	db01      	blt.n	80045e0 <_malloc_r+0x1c>
 80045dc:	42a9      	cmp	r1, r5
 80045de:	d905      	bls.n	80045ec <_malloc_r+0x28>
 80045e0:	230c      	movs	r3, #12
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	2600      	movs	r6, #0
 80045e6:	4630      	mov	r0, r6
 80045e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045ec:	4e2e      	ldr	r6, [pc, #184]	; (80046a8 <_malloc_r+0xe4>)
 80045ee:	f000 f89d 	bl	800472c <__malloc_lock>
 80045f2:	6833      	ldr	r3, [r6, #0]
 80045f4:	461c      	mov	r4, r3
 80045f6:	bb34      	cbnz	r4, 8004646 <_malloc_r+0x82>
 80045f8:	4629      	mov	r1, r5
 80045fa:	4638      	mov	r0, r7
 80045fc:	f7ff ffc2 	bl	8004584 <sbrk_aligned>
 8004600:	1c43      	adds	r3, r0, #1
 8004602:	4604      	mov	r4, r0
 8004604:	d14d      	bne.n	80046a2 <_malloc_r+0xde>
 8004606:	6834      	ldr	r4, [r6, #0]
 8004608:	4626      	mov	r6, r4
 800460a:	2e00      	cmp	r6, #0
 800460c:	d140      	bne.n	8004690 <_malloc_r+0xcc>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	4631      	mov	r1, r6
 8004612:	4638      	mov	r0, r7
 8004614:	eb04 0803 	add.w	r8, r4, r3
 8004618:	f000 f878 	bl	800470c <_sbrk_r>
 800461c:	4580      	cmp	r8, r0
 800461e:	d13a      	bne.n	8004696 <_malloc_r+0xd2>
 8004620:	6821      	ldr	r1, [r4, #0]
 8004622:	3503      	adds	r5, #3
 8004624:	1a6d      	subs	r5, r5, r1
 8004626:	f025 0503 	bic.w	r5, r5, #3
 800462a:	3508      	adds	r5, #8
 800462c:	2d0c      	cmp	r5, #12
 800462e:	bf38      	it	cc
 8004630:	250c      	movcc	r5, #12
 8004632:	4629      	mov	r1, r5
 8004634:	4638      	mov	r0, r7
 8004636:	f7ff ffa5 	bl	8004584 <sbrk_aligned>
 800463a:	3001      	adds	r0, #1
 800463c:	d02b      	beq.n	8004696 <_malloc_r+0xd2>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	442b      	add	r3, r5
 8004642:	6023      	str	r3, [r4, #0]
 8004644:	e00e      	b.n	8004664 <_malloc_r+0xa0>
 8004646:	6822      	ldr	r2, [r4, #0]
 8004648:	1b52      	subs	r2, r2, r5
 800464a:	d41e      	bmi.n	800468a <_malloc_r+0xc6>
 800464c:	2a0b      	cmp	r2, #11
 800464e:	d916      	bls.n	800467e <_malloc_r+0xba>
 8004650:	1961      	adds	r1, r4, r5
 8004652:	42a3      	cmp	r3, r4
 8004654:	6025      	str	r5, [r4, #0]
 8004656:	bf18      	it	ne
 8004658:	6059      	strne	r1, [r3, #4]
 800465a:	6863      	ldr	r3, [r4, #4]
 800465c:	bf08      	it	eq
 800465e:	6031      	streq	r1, [r6, #0]
 8004660:	5162      	str	r2, [r4, r5]
 8004662:	604b      	str	r3, [r1, #4]
 8004664:	4638      	mov	r0, r7
 8004666:	f104 060b 	add.w	r6, r4, #11
 800466a:	f000 f865 	bl	8004738 <__malloc_unlock>
 800466e:	f026 0607 	bic.w	r6, r6, #7
 8004672:	1d23      	adds	r3, r4, #4
 8004674:	1af2      	subs	r2, r6, r3
 8004676:	d0b6      	beq.n	80045e6 <_malloc_r+0x22>
 8004678:	1b9b      	subs	r3, r3, r6
 800467a:	50a3      	str	r3, [r4, r2]
 800467c:	e7b3      	b.n	80045e6 <_malloc_r+0x22>
 800467e:	6862      	ldr	r2, [r4, #4]
 8004680:	42a3      	cmp	r3, r4
 8004682:	bf0c      	ite	eq
 8004684:	6032      	streq	r2, [r6, #0]
 8004686:	605a      	strne	r2, [r3, #4]
 8004688:	e7ec      	b.n	8004664 <_malloc_r+0xa0>
 800468a:	4623      	mov	r3, r4
 800468c:	6864      	ldr	r4, [r4, #4]
 800468e:	e7b2      	b.n	80045f6 <_malloc_r+0x32>
 8004690:	4634      	mov	r4, r6
 8004692:	6876      	ldr	r6, [r6, #4]
 8004694:	e7b9      	b.n	800460a <_malloc_r+0x46>
 8004696:	230c      	movs	r3, #12
 8004698:	603b      	str	r3, [r7, #0]
 800469a:	4638      	mov	r0, r7
 800469c:	f000 f84c 	bl	8004738 <__malloc_unlock>
 80046a0:	e7a1      	b.n	80045e6 <_malloc_r+0x22>
 80046a2:	6025      	str	r5, [r4, #0]
 80046a4:	e7de      	b.n	8004664 <_malloc_r+0xa0>
 80046a6:	bf00      	nop
 80046a8:	20000200 	.word	0x20000200

080046ac <_realloc_r>:
 80046ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b0:	4680      	mov	r8, r0
 80046b2:	4614      	mov	r4, r2
 80046b4:	460e      	mov	r6, r1
 80046b6:	b921      	cbnz	r1, 80046c2 <_realloc_r+0x16>
 80046b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046bc:	4611      	mov	r1, r2
 80046be:	f7ff bf81 	b.w	80045c4 <_malloc_r>
 80046c2:	b92a      	cbnz	r2, 80046d0 <_realloc_r+0x24>
 80046c4:	f7ff ff12 	bl	80044ec <_free_r>
 80046c8:	4625      	mov	r5, r4
 80046ca:	4628      	mov	r0, r5
 80046cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d0:	f000 f838 	bl	8004744 <_malloc_usable_size_r>
 80046d4:	4284      	cmp	r4, r0
 80046d6:	4607      	mov	r7, r0
 80046d8:	d802      	bhi.n	80046e0 <_realloc_r+0x34>
 80046da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046de:	d812      	bhi.n	8004706 <_realloc_r+0x5a>
 80046e0:	4621      	mov	r1, r4
 80046e2:	4640      	mov	r0, r8
 80046e4:	f7ff ff6e 	bl	80045c4 <_malloc_r>
 80046e8:	4605      	mov	r5, r0
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d0ed      	beq.n	80046ca <_realloc_r+0x1e>
 80046ee:	42bc      	cmp	r4, r7
 80046f0:	4622      	mov	r2, r4
 80046f2:	4631      	mov	r1, r6
 80046f4:	bf28      	it	cs
 80046f6:	463a      	movcs	r2, r7
 80046f8:	f7ff fed0 	bl	800449c <memcpy>
 80046fc:	4631      	mov	r1, r6
 80046fe:	4640      	mov	r0, r8
 8004700:	f7ff fef4 	bl	80044ec <_free_r>
 8004704:	e7e1      	b.n	80046ca <_realloc_r+0x1e>
 8004706:	4635      	mov	r5, r6
 8004708:	e7df      	b.n	80046ca <_realloc_r+0x1e>
	...

0800470c <_sbrk_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4d06      	ldr	r5, [pc, #24]	; (8004728 <_sbrk_r+0x1c>)
 8004710:	2300      	movs	r3, #0
 8004712:	4604      	mov	r4, r0
 8004714:	4608      	mov	r0, r1
 8004716:	602b      	str	r3, [r5, #0]
 8004718:	f7fc fc98 	bl	800104c <_sbrk>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d102      	bne.n	8004726 <_sbrk_r+0x1a>
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	b103      	cbz	r3, 8004726 <_sbrk_r+0x1a>
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	bd38      	pop	{r3, r4, r5, pc}
 8004728:	20000208 	.word	0x20000208

0800472c <__malloc_lock>:
 800472c:	4801      	ldr	r0, [pc, #4]	; (8004734 <__malloc_lock+0x8>)
 800472e:	f000 b811 	b.w	8004754 <__retarget_lock_acquire_recursive>
 8004732:	bf00      	nop
 8004734:	2000020c 	.word	0x2000020c

08004738 <__malloc_unlock>:
 8004738:	4801      	ldr	r0, [pc, #4]	; (8004740 <__malloc_unlock+0x8>)
 800473a:	f000 b80c 	b.w	8004756 <__retarget_lock_release_recursive>
 800473e:	bf00      	nop
 8004740:	2000020c 	.word	0x2000020c

08004744 <_malloc_usable_size_r>:
 8004744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004748:	1f18      	subs	r0, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfbc      	itt	lt
 800474e:	580b      	ldrlt	r3, [r1, r0]
 8004750:	18c0      	addlt	r0, r0, r3
 8004752:	4770      	bx	lr

08004754 <__retarget_lock_acquire_recursive>:
 8004754:	4770      	bx	lr

08004756 <__retarget_lock_release_recursive>:
 8004756:	4770      	bx	lr

08004758 <_init>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr

08004764 <_fini>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	bf00      	nop
 8004768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476a:	bc08      	pop	{r3}
 800476c:	469e      	mov	lr, r3
 800476e:	4770      	bx	lr
